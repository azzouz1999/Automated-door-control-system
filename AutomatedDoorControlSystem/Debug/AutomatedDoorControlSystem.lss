
AutomatedDoorControlSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000354e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  0000354e  000035c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023dc  00000000  00000000  00003710  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e70  00000000  00000000  00005aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  0000695c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000210  00000000  00000000  00006b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268a  00000000  00000000  00006d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014e0  00000000  00000000  000093b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012a9  00000000  00000000  0000a896  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000bb40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fe  00000000  00000000  0000bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009aa  00000000  00000000  0000c01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <main>
      7a:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e9       	ldi	r26, 0x96	; 150
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e9       	ldi	r24, 0x96	; 150
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e9       	ldi	r22, 0x96	; 150
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

0000089a <__lesf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__lesf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__lesf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__lesf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

000008fa <__fixsfsi>:
     8fa:	ac e0       	ldi	r26, 0x0C	; 12
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__prologue_saves__+0x20>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	be 01       	movw	r22, r28
     914:	6b 5f       	subi	r22, 0xFB	; 251
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     91c:	8d 81       	ldd	r24, Y+5	; 0x05
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	61 f1       	breq	.+88     	; 0x97a <__fixsfsi+0x80>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	50 f1       	brcs	.+84     	; 0x97a <__fixsfsi+0x80>
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	21 f4       	brne	.+8      	; 0x932 <__fixsfsi+0x38>
     92a:	8e 81       	ldd	r24, Y+6	; 0x06
     92c:	88 23       	and	r24, r24
     92e:	51 f1       	breq	.+84     	; 0x984 <__fixsfsi+0x8a>
     930:	2e c0       	rjmp	.+92     	; 0x98e <__fixsfsi+0x94>
     932:	2f 81       	ldd	r18, Y+7	; 0x07
     934:	38 85       	ldd	r19, Y+8	; 0x08
     936:	37 fd       	sbrc	r19, 7
     938:	20 c0       	rjmp	.+64     	; 0x97a <__fixsfsi+0x80>
     93a:	6e 81       	ldd	r22, Y+6	; 0x06
     93c:	2f 31       	cpi	r18, 0x1F	; 31
     93e:	31 05       	cpc	r19, r1
     940:	1c f0       	brlt	.+6      	; 0x948 <__fixsfsi+0x4e>
     942:	66 23       	and	r22, r22
     944:	f9 f0       	breq	.+62     	; 0x984 <__fixsfsi+0x8a>
     946:	23 c0       	rjmp	.+70     	; 0x98e <__fixsfsi+0x94>
     948:	8e e1       	ldi	r24, 0x1E	; 30
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	82 1b       	sub	r24, r18
     94e:	93 0b       	sbc	r25, r19
     950:	29 85       	ldd	r18, Y+9	; 0x09
     952:	3a 85       	ldd	r19, Y+10	; 0x0a
     954:	4b 85       	ldd	r20, Y+11	; 0x0b
     956:	5c 85       	ldd	r21, Y+12	; 0x0c
     958:	04 c0       	rjmp	.+8      	; 0x962 <__fixsfsi+0x68>
     95a:	56 95       	lsr	r21
     95c:	47 95       	ror	r20
     95e:	37 95       	ror	r19
     960:	27 95       	ror	r18
     962:	8a 95       	dec	r24
     964:	d2 f7       	brpl	.-12     	; 0x95a <__fixsfsi+0x60>
     966:	66 23       	and	r22, r22
     968:	b1 f0       	breq	.+44     	; 0x996 <__fixsfsi+0x9c>
     96a:	50 95       	com	r21
     96c:	40 95       	com	r20
     96e:	30 95       	com	r19
     970:	21 95       	neg	r18
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	4f 4f       	sbci	r20, 0xFF	; 255
     976:	5f 4f       	sbci	r21, 0xFF	; 255
     978:	0e c0       	rjmp	.+28     	; 0x996 <__fixsfsi+0x9c>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	09 c0       	rjmp	.+18     	; 0x996 <__fixsfsi+0x9c>
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	4f ef       	ldi	r20, 0xFF	; 255
     98a:	5f e7       	ldi	r21, 0x7F	; 127
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__fixsfsi+0x9c>
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e8       	ldi	r21, 0x80	; 128
     996:	b9 01       	movw	r22, r18
     998:	ca 01       	movw	r24, r20
     99a:	2c 96       	adiw	r28, 0x0c	; 12
     99c:	e2 e0       	ldi	r30, 0x02	; 2
     99e:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__epilogue_restores__+0x20>

000009a2 <__floatunsisf>:
     9a2:	a8 e0       	ldi	r26, 0x08	; 8
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x10>
     9ae:	7b 01       	movw	r14, r22
     9b0:	8c 01       	movw	r16, r24
     9b2:	61 15       	cp	r22, r1
     9b4:	71 05       	cpc	r23, r1
     9b6:	81 05       	cpc	r24, r1
     9b8:	91 05       	cpc	r25, r1
     9ba:	19 f4       	brne	.+6      	; 0x9c2 <__floatunsisf+0x20>
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	89 83       	std	Y+1, r24	; 0x01
     9c0:	60 c0       	rjmp	.+192    	; 0xa82 <__floatunsisf+0xe0>
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	8e e1       	ldi	r24, 0x1E	; 30
     9c8:	c8 2e       	mov	r12, r24
     9ca:	d1 2c       	mov	r13, r1
     9cc:	dc 82       	std	Y+4, r13	; 0x04
     9ce:	cb 82       	std	Y+3, r12	; 0x03
     9d0:	ed 82       	std	Y+5, r14	; 0x05
     9d2:	fe 82       	std	Y+6, r15	; 0x06
     9d4:	0f 83       	std	Y+7, r16	; 0x07
     9d6:	18 87       	std	Y+8, r17	; 0x08
     9d8:	c8 01       	movw	r24, r16
     9da:	b7 01       	movw	r22, r14
     9dc:	0e 94 4a 05 	call	0xa94	; 0xa94 <__clzsi2>
     9e0:	fc 01       	movw	r30, r24
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	f7 ff       	sbrs	r31, 7
     9e6:	3b c0       	rjmp	.+118    	; 0xa5e <__floatunsisf+0xbc>
     9e8:	22 27       	eor	r18, r18
     9ea:	33 27       	eor	r19, r19
     9ec:	2e 1b       	sub	r18, r30
     9ee:	3f 0b       	sbc	r19, r31
     9f0:	57 01       	movw	r10, r14
     9f2:	68 01       	movw	r12, r16
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatunsisf+0x5e>
     9f8:	d6 94       	lsr	r13
     9fa:	c7 94       	ror	r12
     9fc:	b7 94       	ror	r11
     9fe:	a7 94       	ror	r10
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatunsisf+0x56>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0x7c>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	aa 1f       	adc	r26, r26
     a1c:	bb 1f       	adc	r27, r27
     a1e:	2a 95       	dec	r18
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0x74>
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	a1 09       	sbc	r26, r1
     a26:	b1 09       	sbc	r27, r1
     a28:	8e 21       	and	r24, r14
     a2a:	9f 21       	and	r25, r15
     a2c:	a0 23       	and	r26, r16
     a2e:	b1 23       	and	r27, r17
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	a1 05       	cpc	r26, r1
     a34:	b1 05       	cpc	r27, r1
     a36:	21 f0       	breq	.+8      	; 0xa40 <__floatunsisf+0x9e>
     a38:	41 e0       	ldi	r20, 0x01	; 1
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	4a 29       	or	r20, r10
     a42:	5b 29       	or	r21, r11
     a44:	6c 29       	or	r22, r12
     a46:	7d 29       	or	r23, r13
     a48:	4d 83       	std	Y+5, r20	; 0x05
     a4a:	5e 83       	std	Y+6, r21	; 0x06
     a4c:	6f 83       	std	Y+7, r22	; 0x07
     a4e:	78 87       	std	Y+8, r23	; 0x08
     a50:	8e e1       	ldi	r24, 0x1E	; 30
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	8e 1b       	sub	r24, r30
     a56:	9f 0b       	sbc	r25, r31
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
     a5c:	12 c0       	rjmp	.+36     	; 0xa82 <__floatunsisf+0xe0>
     a5e:	30 97       	sbiw	r30, 0x00	; 0
     a60:	81 f0       	breq	.+32     	; 0xa82 <__floatunsisf+0xe0>
     a62:	0e 2e       	mov	r0, r30
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <__floatunsisf+0xcc>
     a66:	ee 0c       	add	r14, r14
     a68:	ff 1c       	adc	r15, r15
     a6a:	00 1f       	adc	r16, r16
     a6c:	11 1f       	adc	r17, r17
     a6e:	0a 94       	dec	r0
     a70:	d2 f7       	brpl	.-12     	; 0xa66 <__floatunsisf+0xc4>
     a72:	ed 82       	std	Y+5, r14	; 0x05
     a74:	fe 82       	std	Y+6, r15	; 0x06
     a76:	0f 83       	std	Y+7, r16	; 0x07
     a78:	18 87       	std	Y+8, r17	; 0x08
     a7a:	ce 1a       	sub	r12, r30
     a7c:	df 0a       	sbc	r13, r31
     a7e:	dc 82       	std	Y+4, r13	; 0x04
     a80:	cb 82       	std	Y+3, r12	; 0x03
     a82:	1a 82       	std	Y+2, r1	; 0x02
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     a8c:	28 96       	adiw	r28, 0x08	; 8
     a8e:	ea e0       	ldi	r30, 0x0A	; 10
     a90:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x10>

00000a94 <__clzsi2>:
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	7b 01       	movw	r14, r22
     a9e:	8c 01       	movw	r16, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	e8 16       	cp	r14, r24
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	f8 06       	cpc	r15, r24
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	08 07       	cpc	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	18 07       	cpc	r17, r24
     ab0:	88 f4       	brcc	.+34     	; 0xad4 <__clzsi2+0x40>
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	e8 16       	cp	r14, r24
     ab6:	f1 04       	cpc	r15, r1
     ab8:	01 05       	cpc	r16, r1
     aba:	11 05       	cpc	r17, r1
     abc:	31 f0       	breq	.+12     	; 0xaca <__clzsi2+0x36>
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x36>
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	17 c0       	rjmp	.+46     	; 0xaf8 <__clzsi2+0x64>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <__clzsi2+0x64>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	e8 16       	cp	r14, r24
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	f8 06       	cpc	r15, r24
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 07       	cpc	r16, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	18 07       	cpc	r17, r24
     ae4:	28 f0       	brcs	.+10     	; 0xaf0 <__clzsi2+0x5c>
     ae6:	88 e1       	ldi	r24, 0x18	; 24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__clzsi2+0x64>
     af0:	80 e1       	ldi	r24, 0x10	; 16
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	20 e2       	ldi	r18, 0x20	; 32
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	28 1b       	sub	r18, r24
     b02:	39 0b       	sbc	r19, r25
     b04:	4a 0b       	sbc	r20, r26
     b06:	5b 0b       	sbc	r21, r27
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <__clzsi2+0x7e>
     b0a:	16 95       	lsr	r17
     b0c:	07 95       	ror	r16
     b0e:	f7 94       	ror	r15
     b10:	e7 94       	ror	r14
     b12:	8a 95       	dec	r24
     b14:	d2 f7       	brpl	.-12     	; 0xb0a <__clzsi2+0x76>
     b16:	f7 01       	movw	r30, r14
     b18:	e2 56       	subi	r30, 0x62	; 98
     b1a:	ff 4f       	sbci	r31, 0xFF	; 255
     b1c:	80 81       	ld	r24, Z
     b1e:	28 1b       	sub	r18, r24
     b20:	31 09       	sbc	r19, r1
     b22:	41 09       	sbc	r20, r1
     b24:	51 09       	sbc	r21, r1
     b26:	c9 01       	movw	r24, r18
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <__pack_f>:
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	fc 01       	movw	r30, r24
     b3e:	e4 80       	ldd	r14, Z+4	; 0x04
     b40:	f5 80       	ldd	r15, Z+5	; 0x05
     b42:	06 81       	ldd	r16, Z+6	; 0x06
     b44:	17 81       	ldd	r17, Z+7	; 0x07
     b46:	d1 80       	ldd	r13, Z+1	; 0x01
     b48:	80 81       	ld	r24, Z
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	48 f4       	brcc	.+18     	; 0xb60 <__pack_f+0x2e>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e1       	ldi	r26, 0x10	; 16
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e8 2a       	or	r14, r24
     b58:	f9 2a       	or	r15, r25
     b5a:	0a 2b       	or	r16, r26
     b5c:	1b 2b       	or	r17, r27
     b5e:	a5 c0       	rjmp	.+330    	; 0xcaa <__pack_f+0x178>
     b60:	84 30       	cpi	r24, 0x04	; 4
     b62:	09 f4       	brne	.+2      	; 0xb66 <__pack_f+0x34>
     b64:	9f c0       	rjmp	.+318    	; 0xca4 <__pack_f+0x172>
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	21 f4       	brne	.+8      	; 0xb72 <__pack_f+0x40>
     b6a:	ee 24       	eor	r14, r14
     b6c:	ff 24       	eor	r15, r15
     b6e:	87 01       	movw	r16, r14
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <__pack_f+0x4a>
     b72:	e1 14       	cp	r14, r1
     b74:	f1 04       	cpc	r15, r1
     b76:	01 05       	cpc	r16, r1
     b78:	11 05       	cpc	r17, r1
     b7a:	19 f4       	brne	.+6      	; 0xb82 <__pack_f+0x50>
     b7c:	e0 e0       	ldi	r30, 0x00	; 0
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	96 c0       	rjmp	.+300    	; 0xcae <__pack_f+0x17c>
     b82:	62 81       	ldd	r22, Z+2	; 0x02
     b84:	73 81       	ldd	r23, Z+3	; 0x03
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	62 38       	cpi	r22, 0x82	; 130
     b8a:	79 07       	cpc	r23, r25
     b8c:	0c f0       	brlt	.+2      	; 0xb90 <__pack_f+0x5e>
     b8e:	5b c0       	rjmp	.+182    	; 0xc46 <__pack_f+0x114>
     b90:	22 e8       	ldi	r18, 0x82	; 130
     b92:	3f ef       	ldi	r19, 0xFF	; 255
     b94:	26 1b       	sub	r18, r22
     b96:	37 0b       	sbc	r19, r23
     b98:	2a 31       	cpi	r18, 0x1A	; 26
     b9a:	31 05       	cpc	r19, r1
     b9c:	2c f0       	brlt	.+10     	; 0xba8 <__pack_f+0x76>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	2a c0       	rjmp	.+84     	; 0xbfc <__pack_f+0xca>
     ba8:	b8 01       	movw	r22, r16
     baa:	a7 01       	movw	r20, r14
     bac:	02 2e       	mov	r0, r18
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <__pack_f+0x86>
     bb0:	76 95       	lsr	r23
     bb2:	67 95       	ror	r22
     bb4:	57 95       	ror	r21
     bb6:	47 95       	ror	r20
     bb8:	0a 94       	dec	r0
     bba:	d2 f7       	brpl	.-12     	; 0xbb0 <__pack_f+0x7e>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x9c>
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	2a 95       	dec	r18
     bd0:	d2 f7       	brpl	.-12     	; 0xbc6 <__pack_f+0x94>
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	a1 09       	sbc	r26, r1
     bd6:	b1 09       	sbc	r27, r1
     bd8:	8e 21       	and	r24, r14
     bda:	9f 21       	and	r25, r15
     bdc:	a0 23       	and	r26, r16
     bde:	b1 23       	and	r27, r17
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	a1 05       	cpc	r26, r1
     be4:	b1 05       	cpc	r27, r1
     be6:	21 f0       	breq	.+8      	; 0xbf0 <__pack_f+0xbe>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	a0 e0       	ldi	r26, 0x00	; 0
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	9a 01       	movw	r18, r20
     bf2:	ab 01       	movw	r20, r22
     bf4:	28 2b       	or	r18, r24
     bf6:	39 2b       	or	r19, r25
     bf8:	4a 2b       	or	r20, r26
     bfa:	5b 2b       	or	r21, r27
     bfc:	da 01       	movw	r26, r20
     bfe:	c9 01       	movw	r24, r18
     c00:	8f 77       	andi	r24, 0x7F	; 127
     c02:	90 70       	andi	r25, 0x00	; 0
     c04:	a0 70       	andi	r26, 0x00	; 0
     c06:	b0 70       	andi	r27, 0x00	; 0
     c08:	80 34       	cpi	r24, 0x40	; 64
     c0a:	91 05       	cpc	r25, r1
     c0c:	a1 05       	cpc	r26, r1
     c0e:	b1 05       	cpc	r27, r1
     c10:	39 f4       	brne	.+14     	; 0xc20 <__pack_f+0xee>
     c12:	27 ff       	sbrs	r18, 7
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <__pack_f+0xf6>
     c16:	20 5c       	subi	r18, 0xC0	; 192
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	4f 4f       	sbci	r20, 0xFF	; 255
     c1c:	5f 4f       	sbci	r21, 0xFF	; 255
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0xf6>
     c20:	21 5c       	subi	r18, 0xC1	; 193
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	4f 4f       	sbci	r20, 0xFF	; 255
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	e0 e0       	ldi	r30, 0x00	; 0
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	20 30       	cpi	r18, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	3a 07       	cpc	r19, r26
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	4a 07       	cpc	r20, r26
     c36:	a0 e4       	ldi	r26, 0x40	; 64
     c38:	5a 07       	cpc	r21, r26
     c3a:	10 f0       	brcs	.+4      	; 0xc40 <__pack_f+0x10e>
     c3c:	e1 e0       	ldi	r30, 0x01	; 1
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	79 01       	movw	r14, r18
     c42:	8a 01       	movw	r16, r20
     c44:	27 c0       	rjmp	.+78     	; 0xc94 <__pack_f+0x162>
     c46:	60 38       	cpi	r22, 0x80	; 128
     c48:	71 05       	cpc	r23, r1
     c4a:	64 f5       	brge	.+88     	; 0xca4 <__pack_f+0x172>
     c4c:	fb 01       	movw	r30, r22
     c4e:	e1 58       	subi	r30, 0x81	; 129
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	d8 01       	movw	r26, r16
     c54:	c7 01       	movw	r24, r14
     c56:	8f 77       	andi	r24, 0x7F	; 127
     c58:	90 70       	andi	r25, 0x00	; 0
     c5a:	a0 70       	andi	r26, 0x00	; 0
     c5c:	b0 70       	andi	r27, 0x00	; 0
     c5e:	80 34       	cpi	r24, 0x40	; 64
     c60:	91 05       	cpc	r25, r1
     c62:	a1 05       	cpc	r26, r1
     c64:	b1 05       	cpc	r27, r1
     c66:	39 f4       	brne	.+14     	; 0xc76 <__pack_f+0x144>
     c68:	e7 fe       	sbrs	r14, 7
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <__pack_f+0x154>
     c6c:	80 e4       	ldi	r24, 0x40	; 64
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <__pack_f+0x14c>
     c76:	8f e3       	ldi	r24, 0x3F	; 63
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e8 0e       	add	r14, r24
     c80:	f9 1e       	adc	r15, r25
     c82:	0a 1f       	adc	r16, r26
     c84:	1b 1f       	adc	r17, r27
     c86:	17 ff       	sbrs	r17, 7
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <__pack_f+0x162>
     c8a:	16 95       	lsr	r17
     c8c:	07 95       	ror	r16
     c8e:	f7 94       	ror	r15
     c90:	e7 94       	ror	r14
     c92:	31 96       	adiw	r30, 0x01	; 1
     c94:	87 e0       	ldi	r24, 0x07	; 7
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	8a 95       	dec	r24
     ca0:	d1 f7       	brne	.-12     	; 0xc96 <__pack_f+0x164>
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <__pack_f+0x17c>
     ca4:	ee 24       	eor	r14, r14
     ca6:	ff 24       	eor	r15, r15
     ca8:	87 01       	movw	r16, r14
     caa:	ef ef       	ldi	r30, 0xFF	; 255
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	6e 2f       	mov	r22, r30
     cb0:	67 95       	ror	r22
     cb2:	66 27       	eor	r22, r22
     cb4:	67 95       	ror	r22
     cb6:	90 2f       	mov	r25, r16
     cb8:	9f 77       	andi	r25, 0x7F	; 127
     cba:	d7 94       	ror	r13
     cbc:	dd 24       	eor	r13, r13
     cbe:	d7 94       	ror	r13
     cc0:	8e 2f       	mov	r24, r30
     cc2:	86 95       	lsr	r24
     cc4:	49 2f       	mov	r20, r25
     cc6:	46 2b       	or	r20, r22
     cc8:	58 2f       	mov	r21, r24
     cca:	5d 29       	or	r21, r13
     ccc:	b7 01       	movw	r22, r14
     cce:	ca 01       	movw	r24, r20
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	08 95       	ret

00000cdc <__unpack_f>:
     cdc:	fc 01       	movw	r30, r24
     cde:	db 01       	movw	r26, r22
     ce0:	40 81       	ld	r20, Z
     ce2:	51 81       	ldd	r21, Z+1	; 0x01
     ce4:	22 81       	ldd	r18, Z+2	; 0x02
     ce6:	62 2f       	mov	r22, r18
     ce8:	6f 77       	andi	r22, 0x7F	; 127
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	22 1f       	adc	r18, r18
     cee:	22 27       	eor	r18, r18
     cf0:	22 1f       	adc	r18, r18
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	89 2f       	mov	r24, r25
     cf6:	88 0f       	add	r24, r24
     cf8:	82 2b       	or	r24, r18
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	99 1f       	adc	r25, r25
     d00:	99 27       	eor	r25, r25
     d02:	99 1f       	adc	r25, r25
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	9c 93       	st	X, r25
     d08:	11 97       	sbiw	r26, 0x01	; 1
     d0a:	21 15       	cp	r18, r1
     d0c:	31 05       	cpc	r19, r1
     d0e:	a9 f5       	brne	.+106    	; 0xd7a <__unpack_f+0x9e>
     d10:	41 15       	cp	r20, r1
     d12:	51 05       	cpc	r21, r1
     d14:	61 05       	cpc	r22, r1
     d16:	71 05       	cpc	r23, r1
     d18:	11 f4       	brne	.+4      	; 0xd1e <__unpack_f+0x42>
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	37 c0       	rjmp	.+110    	; 0xd8c <__unpack_f+0xb0>
     d1e:	82 e8       	ldi	r24, 0x82	; 130
     d20:	9f ef       	ldi	r25, 0xFF	; 255
     d22:	13 96       	adiw	r26, 0x03	; 3
     d24:	9c 93       	st	X, r25
     d26:	8e 93       	st	-X, r24
     d28:	12 97       	sbiw	r26, 0x02	; 2
     d2a:	9a 01       	movw	r18, r20
     d2c:	ab 01       	movw	r20, r22
     d2e:	67 e0       	ldi	r22, 0x07	; 7
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	44 1f       	adc	r20, r20
     d36:	55 1f       	adc	r21, r21
     d38:	6a 95       	dec	r22
     d3a:	d1 f7       	brne	.-12     	; 0xd30 <__unpack_f+0x54>
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	8c 93       	st	X, r24
     d40:	0d c0       	rjmp	.+26     	; 0xd5c <__unpack_f+0x80>
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	44 1f       	adc	r20, r20
     d48:	55 1f       	adc	r21, r21
     d4a:	12 96       	adiw	r26, 0x02	; 2
     d4c:	8d 91       	ld	r24, X+
     d4e:	9c 91       	ld	r25, X
     d50:	13 97       	sbiw	r26, 0x03	; 3
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	13 96       	adiw	r26, 0x03	; 3
     d56:	9c 93       	st	X, r25
     d58:	8e 93       	st	-X, r24
     d5a:	12 97       	sbiw	r26, 0x02	; 2
     d5c:	20 30       	cpi	r18, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	38 07       	cpc	r19, r24
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	48 07       	cpc	r20, r24
     d66:	80 e4       	ldi	r24, 0x40	; 64
     d68:	58 07       	cpc	r21, r24
     d6a:	58 f3       	brcs	.-42     	; 0xd42 <__unpack_f+0x66>
     d6c:	14 96       	adiw	r26, 0x04	; 4
     d6e:	2d 93       	st	X+, r18
     d70:	3d 93       	st	X+, r19
     d72:	4d 93       	st	X+, r20
     d74:	5c 93       	st	X, r21
     d76:	17 97       	sbiw	r26, 0x07	; 7
     d78:	08 95       	ret
     d7a:	2f 3f       	cpi	r18, 0xFF	; 255
     d7c:	31 05       	cpc	r19, r1
     d7e:	79 f4       	brne	.+30     	; 0xd9e <__unpack_f+0xc2>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	19 f4       	brne	.+6      	; 0xd90 <__unpack_f+0xb4>
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	8c 93       	st	X, r24
     d8e:	08 95       	ret
     d90:	64 ff       	sbrs	r22, 4
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <__unpack_f+0xbe>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	8c 93       	st	X, r24
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <__unpack_f+0xe2>
     d9a:	1c 92       	st	X, r1
     d9c:	10 c0       	rjmp	.+32     	; 0xdbe <__unpack_f+0xe2>
     d9e:	2f 57       	subi	r18, 0x7F	; 127
     da0:	30 40       	sbci	r19, 0x00	; 0
     da2:	13 96       	adiw	r26, 0x03	; 3
     da4:	3c 93       	st	X, r19
     da6:	2e 93       	st	-X, r18
     da8:	12 97       	sbiw	r26, 0x02	; 2
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	8c 93       	st	X, r24
     dae:	87 e0       	ldi	r24, 0x07	; 7
     db0:	44 0f       	add	r20, r20
     db2:	55 1f       	adc	r21, r21
     db4:	66 1f       	adc	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	8a 95       	dec	r24
     dba:	d1 f7       	brne	.-12     	; 0xdb0 <__unpack_f+0xd4>
     dbc:	70 64       	ori	r23, 0x40	; 64
     dbe:	14 96       	adiw	r26, 0x04	; 4
     dc0:	4d 93       	st	X+, r20
     dc2:	5d 93       	st	X+, r21
     dc4:	6d 93       	st	X+, r22
     dc6:	7c 93       	st	X, r23
     dc8:	17 97       	sbiw	r26, 0x07	; 7
     dca:	08 95       	ret

00000dcc <__fpcmp_parts_f>:
     dcc:	1f 93       	push	r17
     dce:	dc 01       	movw	r26, r24
     dd0:	fb 01       	movw	r30, r22
     dd2:	9c 91       	ld	r25, X
     dd4:	92 30       	cpi	r25, 0x02	; 2
     dd6:	08 f4       	brcc	.+2      	; 0xdda <__fpcmp_parts_f+0xe>
     dd8:	47 c0       	rjmp	.+142    	; 0xe68 <__fpcmp_parts_f+0x9c>
     dda:	80 81       	ld	r24, Z
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	08 f4       	brcc	.+2      	; 0xde2 <__fpcmp_parts_f+0x16>
     de0:	43 c0       	rjmp	.+134    	; 0xe68 <__fpcmp_parts_f+0x9c>
     de2:	94 30       	cpi	r25, 0x04	; 4
     de4:	51 f4       	brne	.+20     	; 0xdfa <__fpcmp_parts_f+0x2e>
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	1c 91       	ld	r17, X
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	99 f5       	brne	.+102    	; 0xe54 <__fpcmp_parts_f+0x88>
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	68 2f       	mov	r22, r24
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	61 1b       	sub	r22, r17
     df6:	71 09       	sbc	r23, r1
     df8:	3f c0       	rjmp	.+126    	; 0xe78 <__fpcmp_parts_f+0xac>
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	21 f0       	breq	.+8      	; 0xe06 <__fpcmp_parts_f+0x3a>
     dfe:	92 30       	cpi	r25, 0x02	; 2
     e00:	31 f4       	brne	.+12     	; 0xe0e <__fpcmp_parts_f+0x42>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	b9 f1       	breq	.+110    	; 0xe74 <__fpcmp_parts_f+0xa8>
     e06:	81 81       	ldd	r24, Z+1	; 0x01
     e08:	88 23       	and	r24, r24
     e0a:	89 f1       	breq	.+98     	; 0xe6e <__fpcmp_parts_f+0xa2>
     e0c:	2d c0       	rjmp	.+90     	; 0xe68 <__fpcmp_parts_f+0x9c>
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	1c 91       	ld	r17, X
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	f1 f0       	breq	.+60     	; 0xe54 <__fpcmp_parts_f+0x88>
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	18 17       	cp	r17, r24
     e1c:	d9 f4       	brne	.+54     	; 0xe54 <__fpcmp_parts_f+0x88>
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	2d 91       	ld	r18, X+
     e22:	3c 91       	ld	r19, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	82 17       	cp	r24, r18
     e2c:	93 07       	cpc	r25, r19
     e2e:	94 f0       	brlt	.+36     	; 0xe54 <__fpcmp_parts_f+0x88>
     e30:	28 17       	cp	r18, r24
     e32:	39 07       	cpc	r19, r25
     e34:	bc f0       	brlt	.+46     	; 0xe64 <__fpcmp_parts_f+0x98>
     e36:	14 96       	adiw	r26, 0x04	; 4
     e38:	8d 91       	ld	r24, X+
     e3a:	9d 91       	ld	r25, X+
     e3c:	0d 90       	ld	r0, X+
     e3e:	bc 91       	ld	r27, X
     e40:	a0 2d       	mov	r26, r0
     e42:	24 81       	ldd	r18, Z+4	; 0x04
     e44:	35 81       	ldd	r19, Z+5	; 0x05
     e46:	46 81       	ldd	r20, Z+6	; 0x06
     e48:	57 81       	ldd	r21, Z+7	; 0x07
     e4a:	28 17       	cp	r18, r24
     e4c:	39 07       	cpc	r19, r25
     e4e:	4a 07       	cpc	r20, r26
     e50:	5b 07       	cpc	r21, r27
     e52:	18 f4       	brcc	.+6      	; 0xe5a <__fpcmp_parts_f+0x8e>
     e54:	11 23       	and	r17, r17
     e56:	41 f0       	breq	.+16     	; 0xe68 <__fpcmp_parts_f+0x9c>
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <__fpcmp_parts_f+0xa2>
     e5a:	82 17       	cp	r24, r18
     e5c:	93 07       	cpc	r25, r19
     e5e:	a4 07       	cpc	r26, r20
     e60:	b5 07       	cpc	r27, r21
     e62:	40 f4       	brcc	.+16     	; 0xe74 <__fpcmp_parts_f+0xa8>
     e64:	11 23       	and	r17, r17
     e66:	19 f0       	breq	.+6      	; 0xe6e <__fpcmp_parts_f+0xa2>
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <__fpcmp_parts_f+0xac>
     e6e:	6f ef       	ldi	r22, 0xFF	; 255
     e70:	7f ef       	ldi	r23, 0xFF	; 255
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <__fpcmp_parts_f+0xac>
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	cb 01       	movw	r24, r22
     e7a:	1f 91       	pop	r17
     e7c:	08 95       	ret

00000e7e <DIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_voidSetPinDirection            (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	29 97       	sbiw	r28, 0x09	; 9
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	6a 83       	std	Y+2, r22	; 0x02
     e96:	4b 83       	std	Y+3, r20	; 0x03
	
	if(copy_u8PinId<=7)
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	88 30       	cpi	r24, 0x08	; 8
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <DIO_voidSetPinDirection+0x22>
     e9e:	c9 c1       	rjmp	.+914    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
	{
		if(DIO_PIN_INPUT==copy_u8PinDirection)
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	88 23       	and	r24, r24
     ea4:	09 f0       	breq	.+2      	; 0xea8 <DIO_voidSetPinDirection+0x2a>
     ea6:	7c c0       	rjmp	.+248    	; 0xfa0 <DIO_voidSetPinDirection+0x122>
		{
			switch(copy_u8PortId)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	39 87       	std	Y+9, r19	; 0x09
     eb0:	28 87       	std	Y+8, r18	; 0x08
     eb2:	88 85       	ldd	r24, Y+8	; 0x08
     eb4:	99 85       	ldd	r25, Y+9	; 0x09
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	91 05       	cpc	r25, r1
     eba:	69 f1       	breq	.+90     	; 0xf16 <DIO_voidSetPinDirection+0x98>
     ebc:	28 85       	ldd	r18, Y+8	; 0x08
     ebe:	39 85       	ldd	r19, Y+9	; 0x09
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	2c f4       	brge	.+10     	; 0xed0 <DIO_voidSetPinDirection+0x52>
     ec6:	88 85       	ldd	r24, Y+8	; 0x08
     ec8:	99 85       	ldd	r25, Y+9	; 0x09
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	69 f0       	breq	.+26     	; 0xee8 <DIO_voidSetPinDirection+0x6a>
     ece:	b1 c1       	rjmp	.+866    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
     ed0:	28 85       	ldd	r18, Y+8	; 0x08
     ed2:	39 85       	ldd	r19, Y+9	; 0x09
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	a9 f1       	breq	.+106    	; 0xf44 <DIO_voidSetPinDirection+0xc6>
     eda:	88 85       	ldd	r24, Y+8	; 0x08
     edc:	99 85       	ldd	r25, Y+9	; 0x09
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	09 f4       	brne	.+2      	; 0xee6 <DIO_voidSetPinDirection+0x68>
     ee4:	46 c0       	rjmp	.+140    	; 0xf72 <DIO_voidSetPinDirection+0xf4>
     ee6:	a5 c1       	rjmp	.+842    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			{
			case DIO_PORTA: CLEAR_BIT(GPIOA ->DDR,copy_u8PinId); break;
     ee8:	a9 e3       	ldi	r26, 0x39	; 57
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e9 e3       	ldi	r30, 0x39	; 57
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	48 2f       	mov	r20, r24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_voidSetPinDirection+0x88>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_voidSetPinDirection+0x84>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	11 96       	adiw	r26, 0x01	; 1
     f10:	8c 93       	st	X, r24
     f12:	11 97       	sbiw	r26, 0x01	; 1
     f14:	8e c1       	rjmp	.+796    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTB: CLEAR_BIT(GPIOB ->DDR,copy_u8PinId); break;
     f16:	a6 e3       	ldi	r26, 0x36	; 54
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e6 e3       	ldi	r30, 0x36	; 54
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	81 81       	ldd	r24, Z+1	; 0x01
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinDirection+0xb6>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinDirection+0xb2>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	11 96       	adiw	r26, 0x01	; 1
     f3e:	8c 93       	st	X, r24
     f40:	11 97       	sbiw	r26, 0x01	; 1
     f42:	77 c1       	rjmp	.+750    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTC: CLEAR_BIT(GPIOC ->DDR,copy_u8PinId); break;
     f44:	a3 e3       	ldi	r26, 0x33	; 51
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e3 e3       	ldi	r30, 0x33	; 51
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	81 81       	ldd	r24, Z+1	; 0x01
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_voidSetPinDirection+0xe4>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_voidSetPinDirection+0xe0>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	11 96       	adiw	r26, 0x01	; 1
     f6c:	8c 93       	st	X, r24
     f6e:	11 97       	sbiw	r26, 0x01	; 1
     f70:	60 c1       	rjmp	.+704    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTD: CLEAR_BIT(GPIOD ->DDR,copy_u8PinId); break;
     f72:	a0 e3       	ldi	r26, 0x30	; 48
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e0 e3       	ldi	r30, 0x30	; 48
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	81 81       	ldd	r24, Z+1	; 0x01
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_voidSetPinDirection+0x112>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_voidSetPinDirection+0x10e>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	11 96       	adiw	r26, 0x01	; 1
     f9a:	8c 93       	st	X, r24
     f9c:	11 97       	sbiw	r26, 0x01	; 1
     f9e:	49 c1       	rjmp	.+658    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			default: break;
		
			}
		}
		else if(DIO_PIN_OUTPUT==copy_u8PinDirection)
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <DIO_voidSetPinDirection+0x12a>
     fa6:	78 c0       	rjmp	.+240    	; 0x1098 <DIO_voidSetPinDirection+0x21a>
		{
			switch(copy_u8PortId)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3f 83       	std	Y+7, r19	; 0x07
     fb0:	2e 83       	std	Y+6, r18	; 0x06
     fb2:	8e 81       	ldd	r24, Y+6	; 0x06
     fb4:	9f 81       	ldd	r25, Y+7	; 0x07
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	91 05       	cpc	r25, r1
     fba:	61 f1       	breq	.+88     	; 0x1014 <DIO_voidSetPinDirection+0x196>
     fbc:	2e 81       	ldd	r18, Y+6	; 0x06
     fbe:	3f 81       	ldd	r19, Y+7	; 0x07
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	2c f4       	brge	.+10     	; 0xfd0 <DIO_voidSetPinDirection+0x152>
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	9f 81       	ldd	r25, Y+7	; 0x07
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	69 f0       	breq	.+26     	; 0xfe8 <DIO_voidSetPinDirection+0x16a>
     fce:	31 c1       	rjmp	.+610    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
     fd0:	2e 81       	ldd	r18, Y+6	; 0x06
     fd2:	3f 81       	ldd	r19, Y+7	; 0x07
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	99 f1       	breq	.+102    	; 0x1040 <DIO_voidSetPinDirection+0x1c2>
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	9f 81       	ldd	r25, Y+7	; 0x07
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <DIO_voidSetPinDirection+0x168>
     fe4:	43 c0       	rjmp	.+134    	; 0x106c <DIO_voidSetPinDirection+0x1ee>
     fe6:	25 c1       	rjmp	.+586    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			{
			case DIO_PORTA: SET_BIT(GPIOA ->DDR,copy_u8PinId); break;
     fe8:	a9 e3       	ldi	r26, 0x39	; 57
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e9 e3       	ldi	r30, 0x39	; 57
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	81 81       	ldd	r24, Z+1	; 0x01
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_voidSetPinDirection+0x188>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_voidSetPinDirection+0x184>
    100a:	84 2b       	or	r24, r20
    100c:	11 96       	adiw	r26, 0x01	; 1
    100e:	8c 93       	st	X, r24
    1010:	11 97       	sbiw	r26, 0x01	; 1
    1012:	0f c1       	rjmp	.+542    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTB: SET_BIT(GPIOB ->DDR,copy_u8PinId); break;
    1014:	a6 e3       	ldi	r26, 0x36	; 54
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e6 e3       	ldi	r30, 0x36	; 54
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	81 81       	ldd	r24, Z+1	; 0x01
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_voidSetPinDirection+0x1b4>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_voidSetPinDirection+0x1b0>
    1036:	84 2b       	or	r24, r20
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	8c 93       	st	X, r24
    103c:	11 97       	sbiw	r26, 0x01	; 1
    103e:	f9 c0       	rjmp	.+498    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTC: SET_BIT(GPIOC ->DDR,copy_u8PinId); break;
    1040:	a3 e3       	ldi	r26, 0x33	; 51
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e3 e3       	ldi	r30, 0x33	; 51
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	81 81       	ldd	r24, Z+1	; 0x01
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_voidSetPinDirection+0x1e0>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_voidSetPinDirection+0x1dc>
    1062:	84 2b       	or	r24, r20
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	8c 93       	st	X, r24
    1068:	11 97       	sbiw	r26, 0x01	; 1
    106a:	e3 c0       	rjmp	.+454    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTD: SET_BIT(GPIOD ->DDR,copy_u8PinId); break;
    106c:	a0 e3       	ldi	r26, 0x30	; 48
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e0 e3       	ldi	r30, 0x30	; 48
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	81 81       	ldd	r24, Z+1	; 0x01
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_voidSetPinDirection+0x20c>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_voidSetPinDirection+0x208>
    108e:	84 2b       	or	r24, r20
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	8c 93       	st	X, r24
    1094:	11 97       	sbiw	r26, 0x01	; 1
    1096:	cd c0       	rjmp	.+410    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			default: break;
			}
		
		
		}
		else if(DIO_PIN_INPUT_PULLUP==copy_u8PinDirection)
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	09 f0       	breq	.+2      	; 0x10a0 <DIO_voidSetPinDirection+0x222>
    109e:	c9 c0       	rjmp	.+402    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
		{
			
				switch(copy_u8PortId)
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3d 83       	std	Y+5, r19	; 0x05
    10a8:	2c 83       	std	Y+4, r18	; 0x04
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <DIO_voidSetPinDirection+0x238>
    10b4:	41 c0       	rjmp	.+130    	; 0x1138 <DIO_voidSetPinDirection+0x2ba>
    10b6:	2c 81       	ldd	r18, Y+4	; 0x04
    10b8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	2c f4       	brge	.+10     	; 0x10ca <DIO_voidSetPinDirection+0x24c>
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	71 f0       	breq	.+28     	; 0x10e4 <DIO_voidSetPinDirection+0x266>
    10c8:	b4 c0       	rjmp	.+360    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
    10ca:	2c 81       	ldd	r18, Y+4	; 0x04
    10cc:	3d 81       	ldd	r19, Y+5	; 0x05
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <DIO_voidSetPinDirection+0x258>
    10d4:	5b c0       	rjmp	.+182    	; 0x118c <DIO_voidSetPinDirection+0x30e>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <DIO_voidSetPinDirection+0x264>
    10e0:	7f c0       	rjmp	.+254    	; 0x11e0 <DIO_voidSetPinDirection+0x362>
    10e2:	a7 c0       	rjmp	.+334    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			{
			case DIO_PORTA: CLEAR_BIT(GPIOA ->DDR,copy_u8PinId); SET_BIT(GPIOA ->PORT,copy_u8PinId); break;
    10e4:	a9 e3       	ldi	r26, 0x39	; 57
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e9 e3       	ldi	r30, 0x39	; 57
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	81 81       	ldd	r24, Z+1	; 0x01
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_voidSetPinDirection+0x282>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	2a 95       	dec	r18
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_voidSetPinDirection+0x27e>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	8c 93       	st	X, r24
    110c:	a9 e3       	ldi	r26, 0x39	; 57
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e9 e3       	ldi	r30, 0x39	; 57
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_voidSetPinDirection+0x2ac>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_voidSetPinDirection+0x2a8>
    112e:	84 2b       	or	r24, r20
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	8c 93       	st	X, r24
    1134:	12 97       	sbiw	r26, 0x02	; 2
    1136:	7d c0       	rjmp	.+250    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTB: CLEAR_BIT(GPIOB ->DDR,copy_u8PinId); SET_BIT(GPIOB ->PORT,copy_u8PinId); break;
    1138:	a6 e3       	ldi	r26, 0x36	; 54
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e6 e3       	ldi	r30, 0x36	; 54
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	81 81       	ldd	r24, Z+1	; 0x01
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_voidSetPinDirection+0x2d6>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	2a 95       	dec	r18
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_voidSetPinDirection+0x2d2>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	11 96       	adiw	r26, 0x01	; 1
    115e:	8c 93       	st	X, r24
    1160:	a6 e3       	ldi	r26, 0x36	; 54
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e6 e3       	ldi	r30, 0x36	; 54
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_voidSetPinDirection+0x300>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_voidSetPinDirection+0x2fc>
    1182:	84 2b       	or	r24, r20
    1184:	12 96       	adiw	r26, 0x02	; 2
    1186:	8c 93       	st	X, r24
    1188:	12 97       	sbiw	r26, 0x02	; 2
    118a:	53 c0       	rjmp	.+166    	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTC: CLEAR_BIT(GPIOC ->DDR,copy_u8PinId); SET_BIT(GPIOC ->PORT,copy_u8PinId); break;
    118c:	a3 e3       	ldi	r26, 0x33	; 51
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	81 81       	ldd	r24, Z+1	; 0x01
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_voidSetPinDirection+0x32a>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	2a 95       	dec	r18
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_voidSetPinDirection+0x326>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	8c 93       	st	X, r24
    11b4:	a3 e3       	ldi	r26, 0x33	; 51
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e3 e3       	ldi	r30, 0x33	; 51
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_voidSetPinDirection+0x354>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_voidSetPinDirection+0x350>
    11d6:	84 2b       	or	r24, r20
    11d8:	12 96       	adiw	r26, 0x02	; 2
    11da:	8c 93       	st	X, r24
    11dc:	12 97       	sbiw	r26, 0x02	; 2
    11de:	29 c0       	rjmp	.+82     	; 0x1232 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTD: CLEAR_BIT(GPIOD ->DDR,copy_u8PinId); SET_BIT(GPIOD ->PORT,copy_u8PinId); break;
    11e0:	a0 e3       	ldi	r26, 0x30	; 48
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e0 e3       	ldi	r30, 0x30	; 48
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	81 81       	ldd	r24, Z+1	; 0x01
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_voidSetPinDirection+0x37e>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	2a 95       	dec	r18
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_voidSetPinDirection+0x37a>
    1200:	80 95       	com	r24
    1202:	84 23       	and	r24, r20
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	8c 93       	st	X, r24
    1208:	a0 e3       	ldi	r26, 0x30	; 48
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e0 e3       	ldi	r30, 0x30	; 48
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_voidSetPinDirection+0x3a8>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_voidSetPinDirection+0x3a4>
    122a:	84 2b       	or	r24, r20
    122c:	12 96       	adiw	r26, 0x02	; 2
    122e:	8c 93       	st	X, r24
    1230:	12 97       	sbiw	r26, 0x02	; 2
	}
	else
	{
	/*report an error*/
	}
}
    1232:	29 96       	adiw	r28, 0x09	; 9
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue                (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	29 97       	sbiw	r28, 0x09	; 9
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	6a 83       	std	Y+2, r22	; 0x02
    125c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 30       	cpi	r24, 0x08	; 8
    1262:	08 f0       	brcs	.+2      	; 0x1266 <DIO_voidSetPinValue+0x22>
    1264:	77 c1       	rjmp	.+750    	; 0x1554 <DIO_voidSetPinValue+0x310>
	{
		if(DIO_PIN_LOW==copy_u8PinValue )
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 23       	and	r24, r24
    126a:	09 f0       	breq	.+2      	; 0x126e <DIO_voidSetPinValue+0x2a>
    126c:	7c c0       	rjmp	.+248    	; 0x1366 <DIO_voidSetPinValue+0x122>
		{
		switch(copy_u8PortId)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	39 87       	std	Y+9, r19	; 0x09
    1276:	28 87       	std	Y+8, r18	; 0x08
    1278:	88 85       	ldd	r24, Y+8	; 0x08
    127a:	99 85       	ldd	r25, Y+9	; 0x09
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	69 f1       	breq	.+90     	; 0x12dc <DIO_voidSetPinValue+0x98>
    1282:	28 85       	ldd	r18, Y+8	; 0x08
    1284:	39 85       	ldd	r19, Y+9	; 0x09
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	2c f4       	brge	.+10     	; 0x1296 <DIO_voidSetPinValue+0x52>
    128c:	88 85       	ldd	r24, Y+8	; 0x08
    128e:	99 85       	ldd	r25, Y+9	; 0x09
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	69 f0       	breq	.+26     	; 0x12ae <DIO_voidSetPinValue+0x6a>
    1294:	5f c1       	rjmp	.+702    	; 0x1554 <DIO_voidSetPinValue+0x310>
    1296:	28 85       	ldd	r18, Y+8	; 0x08
    1298:	39 85       	ldd	r19, Y+9	; 0x09
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	a9 f1       	breq	.+106    	; 0x130a <DIO_voidSetPinValue+0xc6>
    12a0:	88 85       	ldd	r24, Y+8	; 0x08
    12a2:	99 85       	ldd	r25, Y+9	; 0x09
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <DIO_voidSetPinValue+0x68>
    12aa:	46 c0       	rjmp	.+140    	; 0x1338 <DIO_voidSetPinValue+0xf4>
    12ac:	53 c1       	rjmp	.+678    	; 0x1554 <DIO_voidSetPinValue+0x310>
			{
			case DIO_PORTA: CLEAR_BIT(GPIOA ->PORT,copy_u8PinId); break;
    12ae:	a9 e3       	ldi	r26, 0x39	; 57
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e9 e3       	ldi	r30, 0x39	; 57
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_voidSetPinValue+0x88>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_voidSetPinValue+0x84>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	12 96       	adiw	r26, 0x02	; 2
    12d6:	8c 93       	st	X, r24
    12d8:	12 97       	sbiw	r26, 0x02	; 2
    12da:	3c c1       	rjmp	.+632    	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTB: CLEAR_BIT(GPIOB ->PORT,copy_u8PinId); break;
    12dc:	a6 e3       	ldi	r26, 0x36	; 54
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e6 e3       	ldi	r30, 0x36	; 54
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_voidSetPinValue+0xb6>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_voidSetPinValue+0xb2>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	12 96       	adiw	r26, 0x02	; 2
    1304:	8c 93       	st	X, r24
    1306:	12 97       	sbiw	r26, 0x02	; 2
    1308:	25 c1       	rjmp	.+586    	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTC: CLEAR_BIT(GPIOC ->PORT,copy_u8PinId); break;
    130a:	a3 e3       	ldi	r26, 0x33	; 51
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e3 e3       	ldi	r30, 0x33	; 51
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_voidSetPinValue+0xe4>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_voidSetPinValue+0xe0>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	12 96       	adiw	r26, 0x02	; 2
    1332:	8c 93       	st	X, r24
    1334:	12 97       	sbiw	r26, 0x02	; 2
    1336:	0e c1       	rjmp	.+540    	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTD: CLEAR_BIT(GPIOD ->PORT,copy_u8PinId); break;
    1338:	a0 e3       	ldi	r26, 0x30	; 48
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e0 e3       	ldi	r30, 0x30	; 48
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_voidSetPinValue+0x112>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_voidSetPinValue+0x10e>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	8c 93       	st	X, r24
    1362:	12 97       	sbiw	r26, 0x02	; 2
    1364:	f7 c0       	rjmp	.+494    	; 0x1554 <DIO_voidSetPinValue+0x310>
			default: break;
			}	
			
		}
	    else if (DIO_PIN_HIGH==copy_u8PinValue)
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	09 f0       	breq	.+2      	; 0x136e <DIO_voidSetPinValue+0x12a>
    136c:	78 c0       	rjmp	.+240    	; 0x145e <DIO_voidSetPinValue+0x21a>
		{
			switch(copy_u8PortId)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3f 83       	std	Y+7, r19	; 0x07
    1376:	2e 83       	std	Y+6, r18	; 0x06
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	9f 81       	ldd	r25, Y+7	; 0x07
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	61 f1       	breq	.+88     	; 0x13da <DIO_voidSetPinValue+0x196>
    1382:	2e 81       	ldd	r18, Y+6	; 0x06
    1384:	3f 81       	ldd	r19, Y+7	; 0x07
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <DIO_voidSetPinValue+0x152>
    138c:	8e 81       	ldd	r24, Y+6	; 0x06
    138e:	9f 81       	ldd	r25, Y+7	; 0x07
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	69 f0       	breq	.+26     	; 0x13ae <DIO_voidSetPinValue+0x16a>
    1394:	df c0       	rjmp	.+446    	; 0x1554 <DIO_voidSetPinValue+0x310>
    1396:	2e 81       	ldd	r18, Y+6	; 0x06
    1398:	3f 81       	ldd	r19, Y+7	; 0x07
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	99 f1       	breq	.+102    	; 0x1406 <DIO_voidSetPinValue+0x1c2>
    13a0:	8e 81       	ldd	r24, Y+6	; 0x06
    13a2:	9f 81       	ldd	r25, Y+7	; 0x07
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <DIO_voidSetPinValue+0x168>
    13aa:	43 c0       	rjmp	.+134    	; 0x1432 <DIO_voidSetPinValue+0x1ee>
    13ac:	d3 c0       	rjmp	.+422    	; 0x1554 <DIO_voidSetPinValue+0x310>
			{
			case DIO_PORTA: SET_BIT(GPIOA ->PORT,copy_u8PinId); break;
    13ae:	a9 e3       	ldi	r26, 0x39	; 57
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e9 e3       	ldi	r30, 0x39	; 57
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_voidSetPinValue+0x188>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_voidSetPinValue+0x184>
    13d0:	84 2b       	or	r24, r20
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	8c 93       	st	X, r24
    13d6:	12 97       	sbiw	r26, 0x02	; 2
    13d8:	bd c0       	rjmp	.+378    	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTB: SET_BIT(GPIOB ->PORT,copy_u8PinId); break;
    13da:	a6 e3       	ldi	r26, 0x36	; 54
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e6 e3       	ldi	r30, 0x36	; 54
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	48 2f       	mov	r20, r24
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_voidSetPinValue+0x1b4>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_voidSetPinValue+0x1b0>
    13fc:	84 2b       	or	r24, r20
    13fe:	12 96       	adiw	r26, 0x02	; 2
    1400:	8c 93       	st	X, r24
    1402:	12 97       	sbiw	r26, 0x02	; 2
    1404:	a7 c0       	rjmp	.+334    	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTC: SET_BIT(GPIOC ->PORT,copy_u8PinId); break;
    1406:	a3 e3       	ldi	r26, 0x33	; 51
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e3 e3       	ldi	r30, 0x33	; 51
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_voidSetPinValue+0x1e0>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_voidSetPinValue+0x1dc>
    1428:	84 2b       	or	r24, r20
    142a:	12 96       	adiw	r26, 0x02	; 2
    142c:	8c 93       	st	X, r24
    142e:	12 97       	sbiw	r26, 0x02	; 2
    1430:	91 c0       	rjmp	.+290    	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTD: SET_BIT(GPIOD ->PORT,copy_u8PinId); break;
    1432:	a0 e3       	ldi	r26, 0x30	; 48
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e0 e3       	ldi	r30, 0x30	; 48
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	48 2f       	mov	r20, r24
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_voidSetPinValue+0x20c>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_voidSetPinValue+0x208>
    1454:	84 2b       	or	r24, r20
    1456:	12 96       	adiw	r26, 0x02	; 2
    1458:	8c 93       	st	X, r24
    145a:	12 97       	sbiw	r26, 0x02	; 2
    145c:	7b c0       	rjmp	.+246    	; 0x1554 <DIO_voidSetPinValue+0x310>
			default: break;
			}	
			
		}
         else if(DIO_PIN_TOGGLE==copy_u8PinValue)
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	09 f0       	breq	.+2      	; 0x1466 <DIO_voidSetPinValue+0x222>
    1464:	77 c0       	rjmp	.+238    	; 0x1554 <DIO_voidSetPinValue+0x310>
		 {
			 	switch(copy_u8PortId)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3d 83       	std	Y+5, r19	; 0x05
    146e:	2c 83       	std	Y+4, r18	; 0x04
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 05       	cpc	r25, r1
    1478:	61 f1       	breq	.+88     	; 0x14d2 <DIO_voidSetPinValue+0x28e>
    147a:	2c 81       	ldd	r18, Y+4	; 0x04
    147c:	3d 81       	ldd	r19, Y+5	; 0x05
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	2c f4       	brge	.+10     	; 0x148e <DIO_voidSetPinValue+0x24a>
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	9d 81       	ldd	r25, Y+5	; 0x05
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	69 f0       	breq	.+26     	; 0x14a6 <DIO_voidSetPinValue+0x262>
    148c:	63 c0       	rjmp	.+198    	; 0x1554 <DIO_voidSetPinValue+0x310>
    148e:	2c 81       	ldd	r18, Y+4	; 0x04
    1490:	3d 81       	ldd	r19, Y+5	; 0x05
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	99 f1       	breq	.+102    	; 0x14fe <DIO_voidSetPinValue+0x2ba>
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	91 05       	cpc	r25, r1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <DIO_voidSetPinValue+0x260>
    14a2:	43 c0       	rjmp	.+134    	; 0x152a <DIO_voidSetPinValue+0x2e6>
    14a4:	57 c0       	rjmp	.+174    	; 0x1554 <DIO_voidSetPinValue+0x310>
			{
			case DIO_PORTA: TOGGLE_BIT(GPIOA ->PORT,copy_u8PinId); break;
    14a6:	a9 e3       	ldi	r26, 0x39	; 57
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e9 e3       	ldi	r30, 0x39	; 57
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_voidSetPinValue+0x280>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_voidSetPinValue+0x27c>
    14c8:	84 27       	eor	r24, r20
    14ca:	12 96       	adiw	r26, 0x02	; 2
    14cc:	8c 93       	st	X, r24
    14ce:	12 97       	sbiw	r26, 0x02	; 2
    14d0:	41 c0       	rjmp	.+130    	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTB: TOGGLE_BIT(GPIOB ->PORT,copy_u8PinId); break;
    14d2:	a6 e3       	ldi	r26, 0x36	; 54
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e6 e3       	ldi	r30, 0x36	; 54
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_voidSetPinValue+0x2ac>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_voidSetPinValue+0x2a8>
    14f4:	84 27       	eor	r24, r20
    14f6:	12 96       	adiw	r26, 0x02	; 2
    14f8:	8c 93       	st	X, r24
    14fa:	12 97       	sbiw	r26, 0x02	; 2
    14fc:	2b c0       	rjmp	.+86     	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTC: TOGGLE_BIT(GPIOC ->PORT,copy_u8PinId); break;
    14fe:	a3 e3       	ldi	r26, 0x33	; 51
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e3 e3       	ldi	r30, 0x33	; 51
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_voidSetPinValue+0x2d8>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_voidSetPinValue+0x2d4>
    1520:	84 27       	eor	r24, r20
    1522:	12 96       	adiw	r26, 0x02	; 2
    1524:	8c 93       	st	X, r24
    1526:	12 97       	sbiw	r26, 0x02	; 2
    1528:	15 c0       	rjmp	.+42     	; 0x1554 <DIO_voidSetPinValue+0x310>
			case DIO_PORTD: TOGGLE_BIT(GPIOD ->PORT,copy_u8PinId); break;
    152a:	a0 e3       	ldi	r26, 0x30	; 48
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e0 e3       	ldi	r30, 0x30	; 48
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	82 81       	ldd	r24, Z+2	; 0x02
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_voidSetPinValue+0x304>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_voidSetPinValue+0x300>
    154c:	84 27       	eor	r24, r20
    154e:	12 96       	adiw	r26, 0x02	; 2
    1550:	8c 93       	st	X, r24
    1552:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
			 /*report an error*/
	}
		 
}
    1554:	29 96       	adiw	r28, 0x09	; 9
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue                (u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <DIO_voidGetPinValue+0x6>
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_voidGetPinValue+0x8>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_voidGetPinValue+0xa>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	6a 83       	std	Y+2, r22	; 0x02
    1578:	5c 83       	std	Y+4, r21	; 0x04
    157a:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	88 30       	cpi	r24, 0x08	; 8
    1580:	08 f0       	brcs	.+2      	; 0x1584 <DIO_voidGetPinValue+0x1e>
    1582:	70 c0       	rjmp	.+224    	; 0x1664 <DIO_voidGetPinValue+0xfe>
	{
		switch(copy_u8PortId)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	3e 83       	std	Y+6, r19	; 0x06
    158c:	2d 83       	std	Y+5, r18	; 0x05
    158e:	4d 81       	ldd	r20, Y+5	; 0x05
    1590:	5e 81       	ldd	r21, Y+6	; 0x06
    1592:	41 30       	cpi	r20, 0x01	; 1
    1594:	51 05       	cpc	r21, r1
    1596:	59 f1       	breq	.+86     	; 0x15ee <DIO_voidGetPinValue+0x88>
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	91 05       	cpc	r25, r1
    15a0:	34 f4       	brge	.+12     	; 0x15ae <DIO_voidGetPinValue+0x48>
    15a2:	2d 81       	ldd	r18, Y+5	; 0x05
    15a4:	3e 81       	ldd	r19, Y+6	; 0x06
    15a6:	21 15       	cp	r18, r1
    15a8:	31 05       	cpc	r19, r1
    15aa:	69 f0       	breq	.+26     	; 0x15c6 <DIO_voidGetPinValue+0x60>
    15ac:	5b c0       	rjmp	.+182    	; 0x1664 <DIO_voidGetPinValue+0xfe>
    15ae:	4d 81       	ldd	r20, Y+5	; 0x05
    15b0:	5e 81       	ldd	r21, Y+6	; 0x06
    15b2:	42 30       	cpi	r20, 0x02	; 2
    15b4:	51 05       	cpc	r21, r1
    15b6:	79 f1       	breq	.+94     	; 0x1616 <DIO_voidGetPinValue+0xb0>
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <DIO_voidGetPinValue+0x5e>
    15c2:	3d c0       	rjmp	.+122    	; 0x163e <DIO_voidGetPinValue+0xd8>
    15c4:	4f c0       	rjmp	.+158    	; 0x1664 <DIO_voidGetPinValue+0xfe>
		{
		case DIO_PORTA: * copy_pu8PinValue = GET_BIT(GPIOA -> PIN, copy_u8PinId); break;
    15c6:	e9 e3       	ldi	r30, 0x39	; 57
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a9 01       	movw	r20, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_voidGetPinValue+0x78>
    15da:	55 95       	asr	r21
    15dc:	47 95       	ror	r20
    15de:	8a 95       	dec	r24
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_voidGetPinValue+0x74>
    15e2:	ca 01       	movw	r24, r20
    15e4:	81 70       	andi	r24, 0x01	; 1
    15e6:	eb 81       	ldd	r30, Y+3	; 0x03
    15e8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ea:	80 83       	st	Z, r24
    15ec:	3b c0       	rjmp	.+118    	; 0x1664 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTB: * copy_pu8PinValue = GET_BIT(GPIOB -> PIN, copy_u8PinId); break;
    15ee:	e6 e3       	ldi	r30, 0x36	; 54
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_voidGetPinValue+0xa0>
    1602:	55 95       	asr	r21
    1604:	47 95       	ror	r20
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_voidGetPinValue+0x9c>
    160a:	ca 01       	movw	r24, r20
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	eb 81       	ldd	r30, Y+3	; 0x03
    1610:	fc 81       	ldd	r31, Y+4	; 0x04
    1612:	80 83       	st	Z, r24
    1614:	27 c0       	rjmp	.+78     	; 0x1664 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTC: * copy_pu8PinValue = GET_BIT(GPIOC -> PIN, copy_u8PinId); break;
    1616:	e3 e3       	ldi	r30, 0x33	; 51
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_voidGetPinValue+0xc8>
    162a:	55 95       	asr	r21
    162c:	47 95       	ror	r20
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_voidGetPinValue+0xc4>
    1632:	ca 01       	movw	r24, r20
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	80 83       	st	Z, r24
    163c:	13 c0       	rjmp	.+38     	; 0x1664 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTD: * copy_pu8PinValue = GET_BIT(GPIOD -> PIN, copy_u8PinId); break;
    163e:	e0 e3       	ldi	r30, 0x30	; 48
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a9 01       	movw	r20, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_voidGetPinValue+0xf0>
    1652:	55 95       	asr	r21
    1654:	47 95       	ror	r20
    1656:	8a 95       	dec	r24
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_voidGetPinValue+0xec>
    165a:	ca 01       	movw	r24, r20
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	eb 81       	ldd	r30, Y+3	; 0x03
    1660:	fc 81       	ldd	r31, Y+4	; 0x04
    1662:	80 83       	st	Z, r24
	else
	{
		 /*report an error*/
	}
	
}
    1664:	26 96       	adiw	r28, 0x06	; 6
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue             (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_voidTogglePinValue+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_voidTogglePinValue+0x8>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinId>=7)
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	87 30       	cpi	r24, 0x07	; 7
    168a:	08 f4       	brcc	.+2      	; 0x168e <DIO_voidTogglePinValue+0x18>
    168c:	77 c0       	rjmp	.+238    	; 0x177c <DIO_voidTogglePinValue+0x106>
	{
		 	switch(copy_u8PortId)
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	3c 83       	std	Y+4, r19	; 0x04
    1696:	2b 83       	std	Y+3, r18	; 0x03
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	91 05       	cpc	r25, r1
    16a0:	61 f1       	breq	.+88     	; 0x16fa <DIO_voidTogglePinValue+0x84>
    16a2:	2b 81       	ldd	r18, Y+3	; 0x03
    16a4:	3c 81       	ldd	r19, Y+4	; 0x04
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	2c f4       	brge	.+10     	; 0x16b6 <DIO_voidTogglePinValue+0x40>
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	69 f0       	breq	.+26     	; 0x16ce <DIO_voidTogglePinValue+0x58>
    16b4:	63 c0       	rjmp	.+198    	; 0x177c <DIO_voidTogglePinValue+0x106>
    16b6:	2b 81       	ldd	r18, Y+3	; 0x03
    16b8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ba:	22 30       	cpi	r18, 0x02	; 2
    16bc:	31 05       	cpc	r19, r1
    16be:	99 f1       	breq	.+102    	; 0x1726 <DIO_voidTogglePinValue+0xb0>
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	83 30       	cpi	r24, 0x03	; 3
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <DIO_voidTogglePinValue+0x56>
    16ca:	43 c0       	rjmp	.+134    	; 0x1752 <DIO_voidTogglePinValue+0xdc>
    16cc:	57 c0       	rjmp	.+174    	; 0x177c <DIO_voidTogglePinValue+0x106>
			{
			case DIO_PORTA: TOGGLE_BIT(GPIOA ->PORT,copy_u8PinId); break;
    16ce:	a9 e3       	ldi	r26, 0x39	; 57
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_voidTogglePinValue+0x76>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_voidTogglePinValue+0x72>
    16f0:	84 27       	eor	r24, r20
    16f2:	12 96       	adiw	r26, 0x02	; 2
    16f4:	8c 93       	st	X, r24
    16f6:	12 97       	sbiw	r26, 0x02	; 2
    16f8:	41 c0       	rjmp	.+130    	; 0x177c <DIO_voidTogglePinValue+0x106>
			case DIO_PORTB: TOGGLE_BIT(GPIOB ->PORT,copy_u8PinId); break;
    16fa:	a6 e3       	ldi	r26, 0x36	; 54
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e6 e3       	ldi	r30, 0x36	; 54
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_voidTogglePinValue+0xa2>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_voidTogglePinValue+0x9e>
    171c:	84 27       	eor	r24, r20
    171e:	12 96       	adiw	r26, 0x02	; 2
    1720:	8c 93       	st	X, r24
    1722:	12 97       	sbiw	r26, 0x02	; 2
    1724:	2b c0       	rjmp	.+86     	; 0x177c <DIO_voidTogglePinValue+0x106>
			case DIO_PORTC: TOGGLE_BIT(GPIOC ->PORT,copy_u8PinId); break;
    1726:	a3 e3       	ldi	r26, 0x33	; 51
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e3 e3       	ldi	r30, 0x33	; 51
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_voidTogglePinValue+0xce>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_voidTogglePinValue+0xca>
    1748:	84 27       	eor	r24, r20
    174a:	12 96       	adiw	r26, 0x02	; 2
    174c:	8c 93       	st	X, r24
    174e:	12 97       	sbiw	r26, 0x02	; 2
    1750:	15 c0       	rjmp	.+42     	; 0x177c <DIO_voidTogglePinValue+0x106>
			case DIO_PORTD: TOGGLE_BIT(GPIOD ->PORT,copy_u8PinId); break;
    1752:	a0 e3       	ldi	r26, 0x30	; 48
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e0 e3       	ldi	r30, 0x30	; 48
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	82 81       	ldd	r24, Z+2	; 0x02
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_voidTogglePinValue+0xfa>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_voidTogglePinValue+0xf6>
    1774:	84 27       	eor	r24, r20
    1776:	12 96       	adiw	r26, 0x02	; 2
    1778:	8c 93       	st	X, r24
    177a:	12 97       	sbiw	r26, 0x02	; 2
	}
	else
	{
			 /*report an error*/
	}
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <DIO_voidActivePinInPullUpResistance>:

void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <DIO_voidActivePinInPullUpResistance+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <DIO_voidActivePinInPullUpResistance+0x8>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinId>=7)
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	87 30       	cpi	r24, 0x07	; 7
    179e:	08 f4       	brcc	.+2      	; 0x17a2 <DIO_voidActivePinInPullUpResistance+0x18>
    17a0:	c9 c0       	rjmp	.+402    	; 0x1934 <DIO_voidActivePinInPullUpResistance+0x1aa>
	{
		switch(copy_u8PortId)
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3c 83       	std	Y+4, r19	; 0x04
    17aa:	2b 83       	std	Y+3, r18	; 0x03
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <DIO_voidActivePinInPullUpResistance+0x2e>
    17b6:	41 c0       	rjmp	.+130    	; 0x183a <DIO_voidActivePinInPullUpResistance+0xb0>
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <DIO_voidActivePinInPullUpResistance+0x42>
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	71 f0       	breq	.+28     	; 0x17e6 <DIO_voidActivePinInPullUpResistance+0x5c>
    17ca:	b4 c0       	rjmp	.+360    	; 0x1934 <DIO_voidActivePinInPullUpResistance+0x1aa>
    17cc:	2b 81       	ldd	r18, Y+3	; 0x03
    17ce:	3c 81       	ldd	r19, Y+4	; 0x04
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <DIO_voidActivePinInPullUpResistance+0x4e>
    17d6:	5b c0       	rjmp	.+182    	; 0x188e <DIO_voidActivePinInPullUpResistance+0x104>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <DIO_voidActivePinInPullUpResistance+0x5a>
    17e2:	7f c0       	rjmp	.+254    	; 0x18e2 <DIO_voidActivePinInPullUpResistance+0x158>
    17e4:	a7 c0       	rjmp	.+334    	; 0x1934 <DIO_voidActivePinInPullUpResistance+0x1aa>
			{
			case DIO_PORTA: CLEAR_BIT(GPIOA ->DDR,copy_u8PinId); SET_BIT(GPIOA ->PORT,copy_u8PinId); break;
    17e6:	a9 e3       	ldi	r26, 0x39	; 57
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e9 e3       	ldi	r30, 0x39	; 57
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	81 81       	ldd	r24, Z+1	; 0x01
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_voidActivePinInPullUpResistance+0x78>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	2a 95       	dec	r18
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_voidActivePinInPullUpResistance+0x74>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	11 96       	adiw	r26, 0x01	; 1
    180c:	8c 93       	st	X, r24
    180e:	a9 e3       	ldi	r26, 0x39	; 57
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e9 e3       	ldi	r30, 0x39	; 57
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_voidActivePinInPullUpResistance+0xa2>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_voidActivePinInPullUpResistance+0x9e>
    1830:	84 2b       	or	r24, r20
    1832:	12 96       	adiw	r26, 0x02	; 2
    1834:	8c 93       	st	X, r24
    1836:	12 97       	sbiw	r26, 0x02	; 2
    1838:	7d c0       	rjmp	.+250    	; 0x1934 <DIO_voidActivePinInPullUpResistance+0x1aa>
			case DIO_PORTB: CLEAR_BIT(GPIOB ->DDR,copy_u8PinId); SET_BIT(GPIOB ->PORT,copy_u8PinId); break;
    183a:	a6 e3       	ldi	r26, 0x36	; 54
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e6 e3       	ldi	r30, 0x36	; 54
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	81 81       	ldd	r24, Z+1	; 0x01
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_voidActivePinInPullUpResistance+0xcc>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	2a 95       	dec	r18
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_voidActivePinInPullUpResistance+0xc8>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	11 96       	adiw	r26, 0x01	; 1
    1860:	8c 93       	st	X, r24
    1862:	a6 e3       	ldi	r26, 0x36	; 54
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e6 e3       	ldi	r30, 0x36	; 54
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_voidActivePinInPullUpResistance+0xf6>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_voidActivePinInPullUpResistance+0xf2>
    1884:	84 2b       	or	r24, r20
    1886:	12 96       	adiw	r26, 0x02	; 2
    1888:	8c 93       	st	X, r24
    188a:	12 97       	sbiw	r26, 0x02	; 2
    188c:	53 c0       	rjmp	.+166    	; 0x1934 <DIO_voidActivePinInPullUpResistance+0x1aa>
			case DIO_PORTC: CLEAR_BIT(GPIOC ->DDR,copy_u8PinId); SET_BIT(GPIOC ->PORT,copy_u8PinId); break;
    188e:	a3 e3       	ldi	r26, 0x33	; 51
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e3 e3       	ldi	r30, 0x33	; 51
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	81 81       	ldd	r24, Z+1	; 0x01
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_voidActivePinInPullUpResistance+0x120>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	2a 95       	dec	r18
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_voidActivePinInPullUpResistance+0x11c>
    18ae:	80 95       	com	r24
    18b0:	84 23       	and	r24, r20
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	8c 93       	st	X, r24
    18b6:	a3 e3       	ldi	r26, 0x33	; 51
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e3 e3       	ldi	r30, 0x33	; 51
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_voidActivePinInPullUpResistance+0x14a>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_voidActivePinInPullUpResistance+0x146>
    18d8:	84 2b       	or	r24, r20
    18da:	12 96       	adiw	r26, 0x02	; 2
    18dc:	8c 93       	st	X, r24
    18de:	12 97       	sbiw	r26, 0x02	; 2
    18e0:	29 c0       	rjmp	.+82     	; 0x1934 <DIO_voidActivePinInPullUpResistance+0x1aa>
			case DIO_PORTD: CLEAR_BIT(GPIOD ->DDR,copy_u8PinId); SET_BIT(GPIOD ->PORT,copy_u8PinId); break;
    18e2:	a0 e3       	ldi	r26, 0x30	; 48
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e0 e3       	ldi	r30, 0x30	; 48
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_voidActivePinInPullUpResistance+0x174>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	2a 95       	dec	r18
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_voidActivePinInPullUpResistance+0x170>
    1902:	80 95       	com	r24
    1904:	84 23       	and	r24, r20
    1906:	11 96       	adiw	r26, 0x01	; 1
    1908:	8c 93       	st	X, r24
    190a:	a0 e3       	ldi	r26, 0x30	; 48
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e0 e3       	ldi	r30, 0x30	; 48
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_voidActivePinInPullUpResistance+0x19e>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_voidActivePinInPullUpResistance+0x19a>
    192c:	84 2b       	or	r24, r20
    192e:	12 96       	adiw	r26, 0x02	; 2
    1930:	8c 93       	st	X, r24
    1932:	12 97       	sbiw	r26, 0x02	; 2
	}
	else
	{
			/*report an error*/
	}
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection            (u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <DIO_voidSetPortDirection+0x6>
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_voidSetPortDirection+0x8>
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3c 83       	std	Y+4, r19	; 0x04
    195a:	2b 83       	std	Y+3, r18	; 0x03
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	91 05       	cpc	r25, r1
    1964:	d1 f0       	breq	.+52     	; 0x199a <DIO_voidSetPortDirection+0x58>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	2c f4       	brge	.+10     	; 0x197a <DIO_voidSetPortDirection+0x38>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	61 f0       	breq	.+24     	; 0x1990 <DIO_voidSetPortDirection+0x4e>
    1978:	1e c0       	rjmp	.+60     	; 0x19b6 <DIO_voidSetPortDirection+0x74>
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	3c 81       	ldd	r19, Y+4	; 0x04
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	81 f0       	breq	.+32     	; 0x19a4 <DIO_voidSetPortDirection+0x62>
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	83 30       	cpi	r24, 0x03	; 3
    198a:	91 05       	cpc	r25, r1
    198c:	81 f0       	breq	.+32     	; 0x19ae <DIO_voidSetPortDirection+0x6c>
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA: GPIOA -> DDR = copy_u8PortDirection; break;
    1990:	e9 e3       	ldi	r30, 0x39	; 57
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	81 83       	std	Z+1, r24	; 0x01
    1998:	0e c0       	rjmp	.+28     	; 0x19b6 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB: GPIOB -> DDR = copy_u8PortDirection; break;
    199a:	e6 e3       	ldi	r30, 0x36	; 54
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	81 83       	std	Z+1, r24	; 0x01
    19a2:	09 c0       	rjmp	.+18     	; 0x19b6 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC: GPIOC -> DDR = copy_u8PortDirection; break;
    19a4:	e3 e3       	ldi	r30, 0x33	; 51
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	81 83       	std	Z+1, r24	; 0x01
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD: GPIOD -> DDR = copy_u8PortDirection; break;
    19ae:	e0 e3       	ldi	r30, 0x30	; 48
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	81 83       	std	Z+1, r24	; 0x01
		default: break;
		
	}
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue                (u8 copy_u8PortId, u8 copy_u8PortValue)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <DIO_voidSetPortValue+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <DIO_voidSetPortValue+0x8>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8PortId)
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	3c 83       	std	Y+4, r19	; 0x04
    19dc:	2b 83       	std	Y+3, r18	; 0x03
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	91 05       	cpc	r25, r1
    19e6:	d1 f0       	breq	.+52     	; 0x1a1c <DIO_voidSetPortValue+0x58>
    19e8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ea:	3c 81       	ldd	r19, Y+4	; 0x04
    19ec:	22 30       	cpi	r18, 0x02	; 2
    19ee:	31 05       	cpc	r19, r1
    19f0:	2c f4       	brge	.+10     	; 0x19fc <DIO_voidSetPortValue+0x38>
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	61 f0       	breq	.+24     	; 0x1a12 <DIO_voidSetPortValue+0x4e>
    19fa:	1e c0       	rjmp	.+60     	; 0x1a38 <DIO_voidSetPortValue+0x74>
    19fc:	2b 81       	ldd	r18, Y+3	; 0x03
    19fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	81 f0       	breq	.+32     	; 0x1a26 <DIO_voidSetPortValue+0x62>
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	83 30       	cpi	r24, 0x03	; 3
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	81 f0       	breq	.+32     	; 0x1a30 <DIO_voidSetPortValue+0x6c>
    1a10:	13 c0       	rjmp	.+38     	; 0x1a38 <DIO_voidSetPortValue+0x74>
	{
		case DIO_PORTA: GPIOA -> PORT = copy_u8PortValue; break;
    1a12:	e9 e3       	ldi	r30, 0x39	; 57
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	82 83       	std	Z+2, r24	; 0x02
    1a1a:	0e c0       	rjmp	.+28     	; 0x1a38 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB: GPIOB -> PORT = copy_u8PortValue; break;
    1a1c:	e6 e3       	ldi	r30, 0x36	; 54
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	82 83       	std	Z+2, r24	; 0x02
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC: GPIOC -> PORT = copy_u8PortValue; break;
    1a26:	e3 e3       	ldi	r30, 0x33	; 51
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	82 83       	std	Z+2, r24	; 0x02
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD: GPIOD -> PORT = copy_u8PortValue; break;
    1a30:	e0 e3       	ldi	r30, 0x30	; 48
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	82 83       	std	Z+2, r24	; 0x02
		default: break;
		
	}
	
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <DIO_voidGetPortValue>:
void DIO_voidGetPortValue                (u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <DIO_voidGetPortValue+0x6>
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <DIO_voidGetPortValue+0x8>
    1a4e:	0f 92       	push	r0
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	7b 83       	std	Y+3, r23	; 0x03
    1a58:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8PortId)
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3d 83       	std	Y+5, r19	; 0x05
    1a62:	2c 83       	std	Y+4, r18	; 0x04
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	e1 f0       	breq	.+56     	; 0x1aa6 <DIO_voidGetPortValue+0x60>
    1a6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a70:	3d 81       	ldd	r19, Y+5	; 0x05
    1a72:	22 30       	cpi	r18, 0x02	; 2
    1a74:	31 05       	cpc	r19, r1
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <DIO_voidGetPortValue+0x3c>
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <DIO_voidGetPortValue+0x52>
    1a80:	26 c0       	rjmp	.+76     	; 0x1ace <DIO_voidGetPortValue+0x88>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	a1 f0       	breq	.+40     	; 0x1ab4 <DIO_voidGetPortValue+0x6e>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	91 05       	cpc	r25, r1
    1a94:	b1 f0       	breq	.+44     	; 0x1ac2 <DIO_voidGetPortValue+0x7c>
    1a96:	1b c0       	rjmp	.+54     	; 0x1ace <DIO_voidGetPortValue+0x88>
	{
		case DIO_PORTA: * copy_pu8PortValue = GPIOA -> PIN; break;
    1a98:	e9 e3       	ldi	r30, 0x39	; 57
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa0:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa2:	80 83       	st	Z, r24
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <DIO_voidGetPortValue+0x88>
		case DIO_PORTB: * copy_pu8PortValue = GPIOB -> PIN; break;
    1aa6:	e6 e3       	ldi	r30, 0x36	; 54
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	ea 81       	ldd	r30, Y+2	; 0x02
    1aae:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab0:	80 83       	st	Z, r24
    1ab2:	0d c0       	rjmp	.+26     	; 0x1ace <DIO_voidGetPortValue+0x88>
		case DIO_PORTC: * copy_pu8PortValue = GPIOC -> PIN; break;
    1ab4:	e3 e3       	ldi	r30, 0x33	; 51
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	ea 81       	ldd	r30, Y+2	; 0x02
    1abc:	fb 81       	ldd	r31, Y+3	; 0x03
    1abe:	80 83       	st	Z, r24
    1ac0:	06 c0       	rjmp	.+12     	; 0x1ace <DIO_voidGetPortValue+0x88>
		case DIO_PORTD: * copy_pu8PortValue = GPIOD -> PIN; break;
    1ac2:	e0 e3       	ldi	r30, 0x30	; 48
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aca:	fb 81       	ldd	r31, Y+3	; 0x03
    1acc:	80 83       	st	Z, r24
		default: break;
		
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue             (u8 copy_u8PortId)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <DIO_voidTogglePortValue+0x6>
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
	
		switch(copy_u8PortId)
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	3b 83       	std	Y+3, r19	; 0x03
    1af4:	2a 83       	std	Y+2, r18	; 0x02
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	9b 81       	ldd	r25, Y+3	; 0x03
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	91 05       	cpc	r25, r1
    1afe:	f9 f0       	breq	.+62     	; 0x1b3e <DIO_voidTogglePortValue+0x60>
    1b00:	2a 81       	ldd	r18, Y+2	; 0x02
    1b02:	3b 81       	ldd	r19, Y+3	; 0x03
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <DIO_voidTogglePortValue+0x36>
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <DIO_voidTogglePortValue+0x4c>
    1b12:	32 c0       	rjmp	.+100    	; 0x1b78 <DIO_voidTogglePortValue+0x9a>
    1b14:	2a 81       	ldd	r18, Y+2	; 0x02
    1b16:	3b 81       	ldd	r19, Y+3	; 0x03
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	d1 f0       	breq	.+52     	; 0x1b52 <DIO_voidTogglePortValue+0x74>
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	9b 81       	ldd	r25, Y+3	; 0x03
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	91 05       	cpc	r25, r1
    1b26:	f9 f0       	breq	.+62     	; 0x1b66 <DIO_voidTogglePortValue+0x88>
    1b28:	27 c0       	rjmp	.+78     	; 0x1b78 <DIO_voidTogglePortValue+0x9a>
	{
		case DIO_PORTA: GPIOA -> PORT^= DIO_PORT_HIGH; break;
    1b2a:	a9 e3       	ldi	r26, 0x39	; 57
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e9 e3       	ldi	r30, 0x39	; 57
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	80 95       	com	r24
    1b36:	12 96       	adiw	r26, 0x02	; 2
    1b38:	8c 93       	st	X, r24
    1b3a:	12 97       	sbiw	r26, 0x02	; 2
    1b3c:	1d c0       	rjmp	.+58     	; 0x1b78 <DIO_voidTogglePortValue+0x9a>
		case DIO_PORTB: GPIOB -> PORT^= DIO_PORT_HIGH; break;
    1b3e:	a6 e3       	ldi	r26, 0x36	; 54
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e6 e3       	ldi	r30, 0x36	; 54
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	80 95       	com	r24
    1b4a:	12 96       	adiw	r26, 0x02	; 2
    1b4c:	8c 93       	st	X, r24
    1b4e:	12 97       	sbiw	r26, 0x02	; 2
    1b50:	13 c0       	rjmp	.+38     	; 0x1b78 <DIO_voidTogglePortValue+0x9a>
		case DIO_PORTC: GPIOC -> PORT^= DIO_PORT_HIGH; break;
    1b52:	a3 e3       	ldi	r26, 0x33	; 51
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e3 e3       	ldi	r30, 0x33	; 51
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	80 95       	com	r24
    1b5e:	12 96       	adiw	r26, 0x02	; 2
    1b60:	8c 93       	st	X, r24
    1b62:	12 97       	sbiw	r26, 0x02	; 2
    1b64:	09 c0       	rjmp	.+18     	; 0x1b78 <DIO_voidTogglePortValue+0x9a>
		case DIO_PORTD: GPIOD -> PORT^= DIO_PORT_HIGH; break;
    1b66:	a0 e3       	ldi	r26, 0x30	; 48
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e0 e3       	ldi	r30, 0x30	; 48
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	80 95       	com	r24
    1b72:	12 96       	adiw	r26, 0x02	; 2
    1b74:	8c 93       	st	X, r24
    1b76:	12 97       	sbiw	r26, 0x02	; 2
		default: break;
		
	}

}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <DIO_voidActivePortInPullUpResistance>:
void DIO_voidActivePortInPullUpResistance(u8 copy_u8PortId)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <DIO_voidActivePortInPullUpResistance+0x6>
    1b8a:	0f 92       	push	r0
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	89 83       	std	Y+1, r24	; 0x01
			switch(copy_u8PortId)
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3b 83       	std	Y+3, r19	; 0x03
    1b9a:	2a 83       	std	Y+2, r18	; 0x02
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	d1 f0       	breq	.+52     	; 0x1bda <DIO_voidActivePortInPullUpResistance+0x56>
    1ba6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba8:	3b 81       	ldd	r19, Y+3	; 0x03
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	2c f4       	brge	.+10     	; 0x1bba <DIO_voidActivePortInPullUpResistance+0x36>
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	61 f0       	breq	.+24     	; 0x1bd0 <DIO_voidActivePortInPullUpResistance+0x4c>
    1bb8:	1e c0       	rjmp	.+60     	; 0x1bf6 <DIO_voidActivePortInPullUpResistance+0x72>
    1bba:	2a 81       	ldd	r18, Y+2	; 0x02
    1bbc:	3b 81       	ldd	r19, Y+3	; 0x03
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	81 f0       	breq	.+32     	; 0x1be4 <DIO_voidActivePortInPullUpResistance+0x60>
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	91 05       	cpc	r25, r1
    1bcc:	81 f0       	breq	.+32     	; 0x1bee <DIO_voidActivePortInPullUpResistance+0x6a>
    1bce:	13 c0       	rjmp	.+38     	; 0x1bf6 <DIO_voidActivePortInPullUpResistance+0x72>
	{
		case DIO_PORTA: GPIOA -> PORT = DIO_PORT_HIGH; break;
    1bd0:	e9 e3       	ldi	r30, 0x39	; 57
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8f ef       	ldi	r24, 0xFF	; 255
    1bd6:	82 83       	std	Z+2, r24	; 0x02
    1bd8:	0e c0       	rjmp	.+28     	; 0x1bf6 <DIO_voidActivePortInPullUpResistance+0x72>
		case DIO_PORTB: GPIOB -> PORT = DIO_PORT_HIGH; break;
    1bda:	e6 e3       	ldi	r30, 0x36	; 54
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	8f ef       	ldi	r24, 0xFF	; 255
    1be0:	82 83       	std	Z+2, r24	; 0x02
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <DIO_voidActivePortInPullUpResistance+0x72>
		case DIO_PORTC: GPIOC -> PORT = DIO_PORT_HIGH; break;
    1be4:	e3 e3       	ldi	r30, 0x33	; 51
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	82 83       	std	Z+2, r24	; 0x02
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <DIO_voidActivePortInPullUpResistance+0x72>
		case DIO_PORTD: GPIOD -> PORT = DIO_PORT_HIGH; break;
    1bee:	e0 e3       	ldi	r30, 0x30	; 48
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	82 83       	std	Z+2, r24	; 0x02
		default: break;
		
	}
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <KPD_init>:
							{'4','5','6','*'},
							{'1','2','3','-'},
							{'C','0','=','+'} };

void KPD_init(void)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <KPD_init+0x6>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
	//R0->R3 (rows)    //b0->b3 //0x0f
	//C0->C3 (columns) //b4->b7 //0xf0

	/*rows input*/
	for (u8 i=0;i<4;i++)
    1c0c:	1a 82       	std	Y+2, r1	; 0x02
    1c0e:	08 c0       	rjmp	.+16     	; 0x1c20 <KPD_init+0x1e>
	{
		DIO_voidSetPinDirection(KPD_ROW_PORT, i, DIO_PIN_INPUT);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	6a 81       	ldd	r22, Y+2	; 0x02
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
{
	//R0->R3 (rows)    //b0->b3 //0x0f
	//C0->C3 (columns) //b4->b7 //0xf0

	/*rows input*/
	for (u8 i=0;i<4;i++)
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	84 30       	cpi	r24, 0x04	; 4
    1c24:	a8 f3       	brcs	.-22     	; 0x1c10 <KPD_init+0xe>
	{
		DIO_voidSetPinDirection(KPD_ROW_PORT, i, DIO_PIN_INPUT);
	}
	/*col output*/
	for (u8 i=4;i<8;i++)
    1c26:	84 e0       	ldi	r24, 0x04	; 4
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	08 c0       	rjmp	.+16     	; 0x1c3c <KPD_init+0x3a>
	{
		DIO_voidSetPinDirection(KPD_COL_PORT, i, DIO_PIN_OUTPUT);
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	69 81       	ldd	r22, Y+1	; 0x01
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
	for (u8 i=0;i<4;i++)
	{
		DIO_voidSetPinDirection(KPD_ROW_PORT, i, DIO_PIN_INPUT);
	}
	/*col output*/
	for (u8 i=4;i<8;i++)
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	8f 5f       	subi	r24, 0xFF	; 255
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	88 30       	cpi	r24, 0x08	; 8
    1c40:	a8 f3       	brcs	.-22     	; 0x1c2c <KPD_init+0x2a>
	{
		DIO_voidSetPinDirection(KPD_COL_PORT, i, DIO_PIN_OUTPUT);
	}
	/*Output high & input pull-up*/
	DIO_voidSetPortValue(KPD_COL_PORT, 0xFF);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	6f ef       	ldi	r22, 0xFF	; 255
    1c46:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPortValue>
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <KPD_GetPressedKey>:

u8 KPD_GetPressedKey(void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	62 97       	sbiw	r28, 0x12	; 18
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
	u8 KeyValue = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	8a 8b       	std	Y+18, r24	; 0x12
	u8 ReturnKeyPressed = 0;
    1c6c:	19 8a       	std	Y+17, r1	; 0x11

	for(u8 col = KPD_C0 ; col <= KPD_C3 ; col++)  //4 to 7
    1c6e:	84 e0       	ldi	r24, 0x04	; 4
    1c70:	88 8b       	std	Y+16, r24	; 0x10
    1c72:	b5 c0       	rjmp	.+362    	; 0x1dde <KPD_GetPressedKey+0x18a>
	{
		DIO_voidSetPinValue(KPD_COL_PORT, col , DIO_PIN_LOW);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	68 89       	ldd	r22, Y+16	; 0x10
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>

		for(u8 row = KPD_R0;  row <= KPD_R3 ; row++ )//0 to 3
    1c7e:	1f 86       	std	Y+15, r1	; 0x0f
    1c80:	a2 c0       	rjmp	.+324    	; 0x1dc6 <KPD_GetPressedKey+0x172>
		{
			DIO_voidGetPinValue(KPD_ROW_PORT, row ,&KeyValue);
    1c82:	9e 01       	movw	r18, r28
    1c84:	2e 5e       	subi	r18, 0xEE	; 238
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c8c:	a9 01       	movw	r20, r18
    1c8e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <DIO_voidGetPinValue>

			if(KeyValue==0)  //If key is pressed
    1c92:	8a 89       	ldd	r24, Y+18	; 0x12
    1c94:	88 23       	and	r24, r24
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <KPD_GetPressedKey+0x46>
    1c98:	93 c0       	rjmp	.+294    	; 0x1dc0 <KPD_GetPressedKey+0x16c>
			{
				ReturnKeyPressed=KPD_Arr[row-KPD_R0][col-KPD_C0];	//get the arr
    1c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	88 89       	ldd	r24, Y+16	; 0x10
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9c 01       	movw	r18, r24
    1ca8:	24 50       	subi	r18, 0x04	; 4
    1caa:	30 40       	sbci	r19, 0x00	; 0
    1cac:	ca 01       	movw	r24, r20
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	82 0f       	add	r24, r18
    1cb8:	93 1f       	adc	r25, r19
    1cba:	fc 01       	movw	r30, r24
    1cbc:	e2 56       	subi	r30, 0x62	; 98
    1cbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc0:	80 81       	ld	r24, Z
    1cc2:	89 8b       	std	Y+17, r24	; 0x11
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a8 e4       	ldi	r26, 0x48	; 72
    1cca:	b2 e4       	ldi	r27, 0x42	; 66
    1ccc:	8b 87       	std	Y+11, r24	; 0x0b
    1cce:	9c 87       	std	Y+12, r25	; 0x0c
    1cd0:	ad 87       	std	Y+13, r26	; 0x0d
    1cd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4a e7       	ldi	r20, 0x7A	; 122
    1ce2:	55 e4       	ldi	r21, 0x45	; 69
    1ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	8f 83       	std	Y+7, r24	; 0x07
    1cee:	98 87       	std	Y+8, r25	; 0x08
    1cf0:	a9 87       	std	Y+9, r26	; 0x09
    1cf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <KPD_GetPressedKey+0xc2>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <KPD_GetPressedKey+0x140>
	else if (__tmp > 65535)
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	4c f5       	brge	.+82     	; 0x1d80 <KPD_GetPressedKey+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9e 83       	std	Y+6, r25	; 0x06
    1d54:	8d 83       	std	Y+5, r24	; 0x05
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <KPD_GetPressedKey+0x122>
    1d58:	80 e9       	ldi	r24, 0x90	; 144
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	9c 83       	std	Y+4, r25	; 0x04
    1d5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <KPD_GetPressedKey+0x110>
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <KPD_GetPressedKey+0x104>
    1d7e:	1d c0       	rjmp	.+58     	; 0x1dba <KPD_GetPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	6f 81       	ldd	r22, Y+7	; 0x07
    1d82:	78 85       	ldd	r23, Y+8	; 0x08
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	9e 81       	ldd	r25, Y+6	; 0x06
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <KPD_GetPressedKey+0x14c>
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	08 c0       	rjmp	.+16     	; 0x1dba <KPD_GetPressedKey+0x166>
				_delay_ms(50);
				while(KeyValue==0) 	//get stuck in while as long as key is pressed
				{
					DIO_voidGetPinValue(KPD_ROW_PORT, row ,&KeyValue);
    1daa:	9e 01       	movw	r18, r28
    1dac:	2e 5e       	subi	r18, 0xEE	; 238
    1dae:	3f 4f       	sbci	r19, 0xFF	; 255
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1db4:	a9 01       	movw	r20, r18
    1db6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <DIO_voidGetPinValue>

			if(KeyValue==0)  //If key is pressed
			{
				ReturnKeyPressed=KPD_Arr[row-KPD_R0][col-KPD_C0];	//get the arr
				_delay_ms(50);
				while(KeyValue==0) 	//get stuck in while as long as key is pressed
    1dba:	8a 89       	ldd	r24, Y+18	; 0x12
    1dbc:	88 23       	and	r24, r24
    1dbe:	a9 f3       	breq	.-22     	; 0x1daa <KPD_GetPressedKey+0x156>

	for(u8 col = KPD_C0 ; col <= KPD_C3 ; col++)  //4 to 7
	{
		DIO_voidSetPinValue(KPD_COL_PORT, col , DIO_PIN_LOW);

		for(u8 row = KPD_R0;  row <= KPD_R3 ; row++ )//0 to 3
    1dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	8f 87       	std	Y+15, r24	; 0x0f
    1dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc8:	84 30       	cpi	r24, 0x04	; 4
    1dca:	08 f4       	brcc	.+2      	; 0x1dce <KPD_GetPressedKey+0x17a>
    1dcc:	5a cf       	rjmp	.-332    	; 0x1c82 <KPD_GetPressedKey+0x2e>
				}
			}


		}
		DIO_voidSetPinValue(KPD_COL_PORT,col,DIO_PIN_HIGH);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	68 89       	ldd	r22, Y+16	; 0x10
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
u8 KPD_GetPressedKey(void)
{
	u8 KeyValue = 1;
	u8 ReturnKeyPressed = 0;

	for(u8 col = KPD_C0 ; col <= KPD_C3 ; col++)  //4 to 7
    1dd8:	88 89       	ldd	r24, Y+16	; 0x10
    1dda:	8f 5f       	subi	r24, 0xFF	; 255
    1ddc:	88 8b       	std	Y+16, r24	; 0x10
    1dde:	88 89       	ldd	r24, Y+16	; 0x10
    1de0:	88 30       	cpi	r24, 0x08	; 8
    1de2:	08 f4       	brcc	.+2      	; 0x1de6 <KPD_GetPressedKey+0x192>
    1de4:	47 cf       	rjmp	.-370    	; 0x1c74 <KPD_GetPressedKey+0x20>

		}
		DIO_voidSetPinValue(KPD_COL_PORT,col,DIO_PIN_HIGH);

	}
	return ReturnKeyPressed;
    1de6:	89 89       	ldd	r24, Y+17	; 0x11
}
    1de8:	62 96       	adiw	r28, 0x12	; 18
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	e8 97       	sbiw	r28, 0x38	; 56
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
	/*control pins*/
	DIO_voidSetPinDirection(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_OUTPUT);
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Ctrl_Port,LCD_RS_Pin,DIO_PIN_OUTPUT);
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Ctrl_Port,LCD_RW_Pin,DIO_PIN_OUTPUT);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
	/*4bit or 8bit data initialization */


	#if LCD_MODE == LCD_4_BIT
	/*choose the 4 bits of data*/
	DIO_voidSetPinDirection(LCD_Data_Port,LCD_4Bit_Pin4,DIO_PIN_OUTPUT);
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_Port,LCD_4Bit_Pin5,DIO_PIN_OUTPUT);
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_Port,LCD_4Bit_Pin6,DIO_PIN_OUTPUT);
    1e40:	83 e0       	ldi	r24, 0x03	; 3
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_Port,LCD_4Bit_Pin7,DIO_PIN_OUTPUT);
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	63 e0       	ldi	r22, 0x03	; 3
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e2       	ldi	r26, 0x20	; 32
    1e5a:	b2 e4       	ldi	r27, 0x42	; 66
    1e5c:	8d ab       	std	Y+53, r24	; 0x35
    1e5e:	9e ab       	std	Y+54, r25	; 0x36
    1e60:	af ab       	std	Y+55, r26	; 0x37
    1e62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e64:	6d a9       	ldd	r22, Y+53	; 0x35
    1e66:	7e a9       	ldd	r23, Y+54	; 0x36
    1e68:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	4a e7       	ldi	r20, 0x7A	; 122
    1e72:	55 e4       	ldi	r21, 0x45	; 69
    1e74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	89 ab       	std	Y+49, r24	; 0x31
    1e7e:	9a ab       	std	Y+50, r25	; 0x32
    1e80:	ab ab       	std	Y+51, r26	; 0x33
    1e82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e84:	69 a9       	ldd	r22, Y+49	; 0x31
    1e86:	7a a9       	ldd	r23, Y+50	; 0x32
    1e88:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e8       	ldi	r20, 0x80	; 128
    1e92:	5f e3       	ldi	r21, 0x3F	; 63
    1e94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	2c f4       	brge	.+10     	; 0x1ea6 <LCD_voidInit+0xac>
		__ticks = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	98 ab       	std	Y+48, r25	; 0x30
    1ea2:	8f a7       	std	Y+47, r24	; 0x2f
    1ea4:	3f c0       	rjmp	.+126    	; 0x1f24 <LCD_voidInit+0x12a>
	else if (__tmp > 65535)
    1ea6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1eac:	9c a9       	ldd	r25, Y+52	; 0x34
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	3f ef       	ldi	r19, 0xFF	; 255
    1eb2:	4f e7       	ldi	r20, 0x7F	; 127
    1eb4:	57 e4       	ldi	r21, 0x47	; 71
    1eb6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eba:	18 16       	cp	r1, r24
    1ebc:	4c f5       	brge	.+82     	; 0x1f10 <LCD_voidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebe:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e2       	ldi	r20, 0x20	; 32
    1ecc:	51 e4       	ldi	r21, 0x41	; 65
    1ece:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	98 ab       	std	Y+48, r25	; 0x30
    1ee4:	8f a7       	std	Y+47, r24	; 0x2f
    1ee6:	0f c0       	rjmp	.+30     	; 0x1f06 <LCD_voidInit+0x10c>
    1ee8:	80 e9       	ldi	r24, 0x90	; 144
    1eea:	91 e0       	ldi	r25, 0x01	; 1
    1eec:	9e a7       	std	Y+46, r25	; 0x2e
    1eee:	8d a7       	std	Y+45, r24	; 0x2d
    1ef0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_voidInit+0xfa>
    1ef8:	9e a7       	std	Y+46, r25	; 0x2e
    1efa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efe:	98 a9       	ldd	r25, Y+48	; 0x30
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	98 ab       	std	Y+48, r25	; 0x30
    1f04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f08:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <LCD_voidInit+0xee>
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <LCD_voidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f10:	69 a9       	ldd	r22, Y+49	; 0x31
    1f12:	7a a9       	ldd	r23, Y+50	; 0x32
    1f14:	8b a9       	ldd	r24, Y+51	; 0x33
    1f16:	9c a9       	ldd	r25, Y+52	; 0x34
    1f18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	98 ab       	std	Y+48, r25	; 0x30
    1f22:	8f a7       	std	Y+47, r24	; 0x2f
    1f24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f26:	98 a9       	ldd	r25, Y+48	; 0x30
    1f28:	9c a7       	std	Y+44, r25	; 0x2c
    1f2a:	8b a7       	std	Y+43, r24	; 0x2b
    1f2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_voidInit+0x136>
    1f34:	9c a7       	std	Y+44, r25	; 0x2c
    1f36:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	LCD_voidWriteCmd(0x33);
    1f38:	83 e3       	ldi	r24, 0x33	; 51
    1f3a:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
	LCD_voidWriteCmd(0x32);
    1f3e:	82 e3       	ldi	r24, 0x32	; 50
    1f40:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
	LCD_voidWriteCmd(0x28);
    1f44:	88 e2       	ldi	r24, 0x28	; 40
    1f46:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 e8       	ldi	r26, 0x80	; 128
    1f50:	bf e3       	ldi	r27, 0x3F	; 63
    1f52:	8f a3       	std	Y+39, r24	; 0x27
    1f54:	98 a7       	std	Y+40, r25	; 0x28
    1f56:	a9 a7       	std	Y+41, r26	; 0x29
    1f58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a e7       	ldi	r20, 0x7A	; 122
    1f68:	55 e4       	ldi	r21, 0x45	; 69
    1f6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8b a3       	std	Y+35, r24	; 0x23
    1f74:	9c a3       	std	Y+36, r25	; 0x24
    1f76:	ad a3       	std	Y+37, r26	; 0x25
    1f78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <LCD_voidInit+0x1a2>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9a a3       	std	Y+34, r25	; 0x22
    1f98:	89 a3       	std	Y+33, r24	; 0x21
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    1f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9a a3       	std	Y+34, r25	; 0x22
    1fda:	89 a3       	std	Y+33, r24	; 0x21
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <LCD_voidInit+0x202>
    1fde:	80 e9       	ldi	r24, 0x90	; 144
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	98 a3       	std	Y+32, r25	; 0x20
    1fe4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fe8:	98 a1       	ldd	r25, Y+32	; 0x20
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_voidInit+0x1f0>
    1fee:	98 a3       	std	Y+32, r25	; 0x20
    1ff0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <LCD_voidInit+0x1e4>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	6b a1       	ldd	r22, Y+35	; 0x23
    2008:	7c a1       	ldd	r23, Y+36	; 0x24
    200a:	8d a1       	ldd	r24, Y+37	; 0x25
    200c:	9e a1       	ldd	r25, Y+38	; 0x26
    200e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9a a3       	std	Y+34, r25	; 0x22
    2018:	89 a3       	std	Y+33, r24	; 0x21
    201a:	89 a1       	ldd	r24, Y+33	; 0x21
    201c:	9a a1       	ldd	r25, Y+34	; 0x22
    201e:	9e 8f       	std	Y+30, r25	; 0x1e
    2020:	8d 8f       	std	Y+29, r24	; 0x1d
    2022:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2024:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_voidInit+0x22c>
    202a:	9e 8f       	std	Y+30, r25	; 0x1e
    202c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidWriteCmd(0x0E);
    202e:	8e e0       	ldi	r24, 0x0E	; 14
    2030:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e8       	ldi	r26, 0x80	; 128
    203a:	bf e3       	ldi	r27, 0x3F	; 63
    203c:	89 8f       	std	Y+25, r24	; 0x19
    203e:	9a 8f       	std	Y+26, r25	; 0x1a
    2040:	ab 8f       	std	Y+27, r26	; 0x1b
    2042:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	69 8d       	ldd	r22, Y+25	; 0x19
    2046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	4a e7       	ldi	r20, 0x7A	; 122
    2052:	55 e4       	ldi	r21, 0x45	; 69
    2054:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8d 8b       	std	Y+21, r24	; 0x15
    205e:	9e 8b       	std	Y+22, r25	; 0x16
    2060:	af 8b       	std	Y+23, r26	; 0x17
    2062:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	2c f4       	brge	.+10     	; 0x2086 <LCD_voidInit+0x28c>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c 8b       	std	Y+20, r25	; 0x14
    2082:	8b 8b       	std	Y+19, r24	; 0x13
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	3f ef       	ldi	r19, 0xFF	; 255
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	57 e4       	ldi	r21, 0x47	; 71
    2096:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	4c f5       	brge	.+82     	; 0x20f0 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	69 8d       	ldd	r22, Y+25	; 0x19
    20a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <LCD_voidInit+0x2ec>
    20c8:	80 e9       	ldi	r24, 0x90	; 144
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	9a 8b       	std	Y+18, r25	; 0x12
    20ce:	89 8b       	std	Y+17, r24	; 0x11
    20d0:	89 89       	ldd	r24, Y+17	; 0x11
    20d2:	9a 89       	ldd	r25, Y+18	; 0x12
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_voidInit+0x2da>
    20d8:	9a 8b       	std	Y+18, r25	; 0x12
    20da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20dc:	8b 89       	ldd	r24, Y+19	; 0x13
    20de:	9c 89       	ldd	r25, Y+20	; 0x14
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	9c 8b       	std	Y+20, r25	; 0x14
    20e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e6:	8b 89       	ldd	r24, Y+19	; 0x13
    20e8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	69 f7       	brne	.-38     	; 0x20c8 <LCD_voidInit+0x2ce>
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f0:	6d 89       	ldd	r22, Y+21	; 0x15
    20f2:	7e 89       	ldd	r23, Y+22	; 0x16
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	98 8d       	ldd	r25, Y+24	; 0x18
    20f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
    2104:	8b 89       	ldd	r24, Y+19	; 0x13
    2106:	9c 89       	ldd	r25, Y+20	; 0x14
    2108:	98 8b       	std	Y+16, r25	; 0x10
    210a:	8f 87       	std	Y+15, r24	; 0x0f
    210c:	8f 85       	ldd	r24, Y+15	; 0x0f
    210e:	98 89       	ldd	r25, Y+16	; 0x10
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_voidInit+0x316>
    2114:	98 8b       	std	Y+16, r25	; 0x10
    2116:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidWriteCmd(0x01);
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	b0 e4       	ldi	r27, 0x40	; 64
    2126:	8b 87       	std	Y+11, r24	; 0x0b
    2128:	9c 87       	std	Y+12, r25	; 0x0c
    212a:	ad 87       	std	Y+13, r26	; 0x0d
    212c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2130:	7c 85       	ldd	r23, Y+12	; 0x0c
    2132:	8d 85       	ldd	r24, Y+13	; 0x0d
    2134:	9e 85       	ldd	r25, Y+14	; 0x0e
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	4a e7       	ldi	r20, 0x7A	; 122
    213c:	55 e4       	ldi	r21, 0x45	; 69
    213e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	8f 83       	std	Y+7, r24	; 0x07
    2148:	98 87       	std	Y+8, r25	; 0x08
    214a:	a9 87       	std	Y+9, r26	; 0x09
    214c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    214e:	6f 81       	ldd	r22, Y+7	; 0x07
    2150:	78 85       	ldd	r23, Y+8	; 0x08
    2152:	89 85       	ldd	r24, Y+9	; 0x09
    2154:	9a 85       	ldd	r25, Y+10	; 0x0a
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e8       	ldi	r20, 0x80	; 128
    215c:	5f e3       	ldi	r21, 0x3F	; 63
    215e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2162:	88 23       	and	r24, r24
    2164:	2c f4       	brge	.+10     	; 0x2170 <LCD_voidInit+0x376>
		__ticks = 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
    216e:	3f c0       	rjmp	.+126    	; 0x21ee <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    2170:	6f 81       	ldd	r22, Y+7	; 0x07
    2172:	78 85       	ldd	r23, Y+8	; 0x08
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	3f ef       	ldi	r19, 0xFF	; 255
    217c:	4f e7       	ldi	r20, 0x7F	; 127
    217e:	57 e4       	ldi	r21, 0x47	; 71
    2180:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2184:	18 16       	cp	r1, r24
    2186:	4c f5       	brge	.+82     	; 0x21da <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2188:	6b 85       	ldd	r22, Y+11	; 0x0b
    218a:	7c 85       	ldd	r23, Y+12	; 0x0c
    218c:	8d 85       	ldd	r24, Y+13	; 0x0d
    218e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e2       	ldi	r20, 0x20	; 32
    2196:	51 e4       	ldi	r21, 0x41	; 65
    2198:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
    21b0:	0f c0       	rjmp	.+30     	; 0x21d0 <LCD_voidInit+0x3d6>
    21b2:	80 e9       	ldi	r24, 0x90	; 144
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_voidInit+0x3c4>
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	9e 81       	ldd	r25, Y+6	; 0x06
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	69 f7       	brne	.-38     	; 0x21b2 <LCD_voidInit+0x3b8>
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21da:	6f 81       	ldd	r22, Y+7	; 0x07
    21dc:	78 85       	ldd	r23, Y+8	; 0x08
    21de:	89 85       	ldd	r24, Y+9	; 0x09
    21e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <LCD_voidInit+0x400>
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteCmd(0x06);/*Entry mode set*/
	_delay_us(40);

	#endif

}
    2202:	e8 96       	adiw	r28, 0x38	; 56
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <LCD_voidWriteCmd>:

void LCD_voidWriteCmd(u8 copy_u8Cmd)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	e9 97       	sbiw	r28, 0x39	; 57
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPinValue(LCD_Ctrl_Port, LCD_RS_Pin, DIO_PIN_LOW); /*command*/
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Ctrl_Port, LCD_RW_Pin, DIO_PIN_LOW); /*write*/
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	61 e0       	ldi	r22, 0x01	; 1
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	
#if LCD_MODE == LCD_4_BIT

	DIO_voidSetPinValue(LCD_Data_Port, LCD_4Bit_Pin4, (GET_BIT(copy_u8Cmd,4)));
    223e:	89 ad       	ldd	r24, Y+57	; 0x39
    2240:	82 95       	swap	r24
    2242:	8f 70       	andi	r24, 0x0F	; 15
    2244:	98 2f       	mov	r25, r24
    2246:	91 70       	andi	r25, 0x01	; 1
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	49 2f       	mov	r20, r25
    224e:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port, LCD_4Bit_Pin5, (GET_BIT(copy_u8Cmd,5)));
    2252:	89 ad       	ldd	r24, Y+57	; 0x39
    2254:	82 95       	swap	r24
    2256:	86 95       	lsr	r24
    2258:	87 70       	andi	r24, 0x07	; 7
    225a:	98 2f       	mov	r25, r24
    225c:	91 70       	andi	r25, 0x01	; 1
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	61 e0       	ldi	r22, 0x01	; 1
    2262:	49 2f       	mov	r20, r25
    2264:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port, LCD_4Bit_Pin6, (GET_BIT(copy_u8Cmd,6)));
    2268:	89 ad       	ldd	r24, Y+57	; 0x39
    226a:	82 95       	swap	r24
    226c:	86 95       	lsr	r24
    226e:	86 95       	lsr	r24
    2270:	83 70       	andi	r24, 0x03	; 3
    2272:	98 2f       	mov	r25, r24
    2274:	91 70       	andi	r25, 0x01	; 1
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	62 e0       	ldi	r22, 0x02	; 2
    227a:	49 2f       	mov	r20, r25
    227c:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port, LCD_4Bit_Pin7, (GET_BIT(copy_u8Cmd,7)));
    2280:	89 ad       	ldd	r24, Y+57	; 0x39
    2282:	98 2f       	mov	r25, r24
    2284:	99 1f       	adc	r25, r25
    2286:	99 27       	eor	r25, r25
    2288:	99 1f       	adc	r25, r25
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	63 e0       	ldi	r22, 0x03	; 3
    228e:	49 2f       	mov	r20, r25
    2290:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>


	DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_HIGH);
    2294:	82 e0       	ldi	r24, 0x02	; 2
    2296:	62 e0       	ldi	r22, 0x02	; 2
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	a0 e8       	ldi	r26, 0x80	; 128
    22a4:	bf e3       	ldi	r27, 0x3F	; 63
    22a6:	8d ab       	std	Y+53, r24	; 0x35
    22a8:	9e ab       	std	Y+54, r25	; 0x36
    22aa:	af ab       	std	Y+55, r26	; 0x37
    22ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ae:	6d a9       	ldd	r22, Y+53	; 0x35
    22b0:	7e a9       	ldd	r23, Y+54	; 0x36
    22b2:	8f a9       	ldd	r24, Y+55	; 0x37
    22b4:	98 ad       	ldd	r25, Y+56	; 0x38
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	4a e7       	ldi	r20, 0x7A	; 122
    22bc:	55 e4       	ldi	r21, 0x45	; 69
    22be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	89 ab       	std	Y+49, r24	; 0x31
    22c8:	9a ab       	std	Y+50, r25	; 0x32
    22ca:	ab ab       	std	Y+51, r26	; 0x33
    22cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22ce:	69 a9       	ldd	r22, Y+49	; 0x31
    22d0:	7a a9       	ldd	r23, Y+50	; 0x32
    22d2:	8b a9       	ldd	r24, Y+51	; 0x33
    22d4:	9c a9       	ldd	r25, Y+52	; 0x34
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e8       	ldi	r20, 0x80	; 128
    22dc:	5f e3       	ldi	r21, 0x3F	; 63
    22de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22e2:	88 23       	and	r24, r24
    22e4:	2c f4       	brge	.+10     	; 0x22f0 <LCD_voidWriteCmd+0xdc>
		__ticks = 1;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	98 ab       	std	Y+48, r25	; 0x30
    22ec:	8f a7       	std	Y+47, r24	; 0x2f
    22ee:	3f c0       	rjmp	.+126    	; 0x236e <LCD_voidWriteCmd+0x15a>
	else if (__tmp > 65535)
    22f0:	69 a9       	ldd	r22, Y+49	; 0x31
    22f2:	7a a9       	ldd	r23, Y+50	; 0x32
    22f4:	8b a9       	ldd	r24, Y+51	; 0x33
    22f6:	9c a9       	ldd	r25, Y+52	; 0x34
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	3f ef       	ldi	r19, 0xFF	; 255
    22fc:	4f e7       	ldi	r20, 0x7F	; 127
    22fe:	57 e4       	ldi	r21, 0x47	; 71
    2300:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2304:	18 16       	cp	r1, r24
    2306:	4c f5       	brge	.+82     	; 0x235a <LCD_voidWriteCmd+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2308:	6d a9       	ldd	r22, Y+53	; 0x35
    230a:	7e a9       	ldd	r23, Y+54	; 0x36
    230c:	8f a9       	ldd	r24, Y+55	; 0x37
    230e:	98 ad       	ldd	r25, Y+56	; 0x38
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	98 ab       	std	Y+48, r25	; 0x30
    232e:	8f a7       	std	Y+47, r24	; 0x2f
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <LCD_voidWriteCmd+0x13c>
    2332:	80 e9       	ldi	r24, 0x90	; 144
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	9e a7       	std	Y+46, r25	; 0x2e
    2338:	8d a7       	std	Y+45, r24	; 0x2d
    233a:	8d a5       	ldd	r24, Y+45	; 0x2d
    233c:	9e a5       	ldd	r25, Y+46	; 0x2e
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <LCD_voidWriteCmd+0x12a>
    2342:	9e a7       	std	Y+46, r25	; 0x2e
    2344:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2346:	8f a5       	ldd	r24, Y+47	; 0x2f
    2348:	98 a9       	ldd	r25, Y+48	; 0x30
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	98 ab       	std	Y+48, r25	; 0x30
    234e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2350:	8f a5       	ldd	r24, Y+47	; 0x2f
    2352:	98 a9       	ldd	r25, Y+48	; 0x30
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	69 f7       	brne	.-38     	; 0x2332 <LCD_voidWriteCmd+0x11e>
    2358:	14 c0       	rjmp	.+40     	; 0x2382 <LCD_voidWriteCmd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235a:	69 a9       	ldd	r22, Y+49	; 0x31
    235c:	7a a9       	ldd	r23, Y+50	; 0x32
    235e:	8b a9       	ldd	r24, Y+51	; 0x33
    2360:	9c a9       	ldd	r25, Y+52	; 0x34
    2362:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	98 ab       	std	Y+48, r25	; 0x30
    236c:	8f a7       	std	Y+47, r24	; 0x2f
    236e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2370:	98 a9       	ldd	r25, Y+48	; 0x30
    2372:	9c a7       	std	Y+44, r25	; 0x2c
    2374:	8b a7       	std	Y+43, r24	; 0x2b
    2376:	8b a5       	ldd	r24, Y+43	; 0x2b
    2378:	9c a5       	ldd	r25, Y+44	; 0x2c
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <LCD_voidWriteCmd+0x166>
    237e:	9c a7       	std	Y+44, r25	; 0x2c
    2380:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_LOW);
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	62 e0       	ldi	r22, 0x02	; 2
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 ea       	ldi	r26, 0xA0	; 160
    2392:	b0 e4       	ldi	r27, 0x40	; 64
    2394:	8f a3       	std	Y+39, r24	; 0x27
    2396:	98 a7       	std	Y+40, r25	; 0x28
    2398:	a9 a7       	std	Y+41, r26	; 0x29
    239a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6f a1       	ldd	r22, Y+39	; 0x27
    239e:	78 a5       	ldd	r23, Y+40	; 0x28
    23a0:	89 a5       	ldd	r24, Y+41	; 0x29
    23a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a e7       	ldi	r20, 0x7A	; 122
    23aa:	55 e4       	ldi	r21, 0x45	; 69
    23ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	8b a3       	std	Y+35, r24	; 0x23
    23b6:	9c a3       	std	Y+36, r25	; 0x24
    23b8:	ad a3       	std	Y+37, r26	; 0x25
    23ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23bc:	6b a1       	ldd	r22, Y+35	; 0x23
    23be:	7c a1       	ldd	r23, Y+36	; 0x24
    23c0:	8d a1       	ldd	r24, Y+37	; 0x25
    23c2:	9e a1       	ldd	r25, Y+38	; 0x26
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <LCD_voidWriteCmd+0x1ca>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9a a3       	std	Y+34, r25	; 0x22
    23da:	89 a3       	std	Y+33, r24	; 0x21
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <LCD_voidWriteCmd+0x248>
	else if (__tmp > 65535)
    23de:	6b a1       	ldd	r22, Y+35	; 0x23
    23e0:	7c a1       	ldd	r23, Y+36	; 0x24
    23e2:	8d a1       	ldd	r24, Y+37	; 0x25
    23e4:	9e a1       	ldd	r25, Y+38	; 0x26
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <LCD_voidWriteCmd+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	6f a1       	ldd	r22, Y+39	; 0x27
    23f8:	78 a5       	ldd	r23, Y+40	; 0x28
    23fa:	89 a5       	ldd	r24, Y+41	; 0x29
    23fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9a a3       	std	Y+34, r25	; 0x22
    241c:	89 a3       	std	Y+33, r24	; 0x21
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_voidWriteCmd+0x22a>
    2420:	80 e9       	ldi	r24, 0x90	; 144
    2422:	91 e0       	ldi	r25, 0x01	; 1
    2424:	98 a3       	std	Y+32, r25	; 0x20
    2426:	8f 8f       	std	Y+31, r24	; 0x1f
    2428:	8f 8d       	ldd	r24, Y+31	; 0x1f
    242a:	98 a1       	ldd	r25, Y+32	; 0x20
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_voidWriteCmd+0x218>
    2430:	98 a3       	std	Y+32, r25	; 0x20
    2432:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	89 a1       	ldd	r24, Y+33	; 0x21
    2436:	9a a1       	ldd	r25, Y+34	; 0x22
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9a a3       	std	Y+34, r25	; 0x22
    243c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	89 a1       	ldd	r24, Y+33	; 0x21
    2440:	9a a1       	ldd	r25, Y+34	; 0x22
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <LCD_voidWriteCmd+0x20c>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <LCD_voidWriteCmd+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	6b a1       	ldd	r22, Y+35	; 0x23
    244a:	7c a1       	ldd	r23, Y+36	; 0x24
    244c:	8d a1       	ldd	r24, Y+37	; 0x25
    244e:	9e a1       	ldd	r25, Y+38	; 0x26
    2450:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9a a3       	std	Y+34, r25	; 0x22
    245a:	89 a3       	std	Y+33, r24	; 0x21
    245c:	89 a1       	ldd	r24, Y+33	; 0x21
    245e:	9a a1       	ldd	r25, Y+34	; 0x22
    2460:	9e 8f       	std	Y+30, r25	; 0x1e
    2462:	8d 8f       	std	Y+29, r24	; 0x1d
    2464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2466:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_voidWriteCmd+0x254>
    246c:	9e 8f       	std	Y+30, r25	; 0x1e
    246e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);


	DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin4, (GET_BIT(copy_u8Cmd,0)));
    2470:	89 ad       	ldd	r24, Y+57	; 0x39
    2472:	98 2f       	mov	r25, r24
    2474:	91 70       	andi	r25, 0x01	; 1
    2476:	83 e0       	ldi	r24, 0x03	; 3
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	49 2f       	mov	r20, r25
    247c:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin5, (GET_BIT(copy_u8Cmd,1)));
    2480:	89 ad       	ldd	r24, Y+57	; 0x39
    2482:	86 95       	lsr	r24
    2484:	98 2f       	mov	r25, r24
    2486:	91 70       	andi	r25, 0x01	; 1
    2488:	83 e0       	ldi	r24, 0x03	; 3
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	49 2f       	mov	r20, r25
    248e:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin6, (GET_BIT(copy_u8Cmd,2)));
    2492:	89 ad       	ldd	r24, Y+57	; 0x39
    2494:	86 95       	lsr	r24
    2496:	86 95       	lsr	r24
    2498:	98 2f       	mov	r25, r24
    249a:	91 70       	andi	r25, 0x01	; 1
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	49 2f       	mov	r20, r25
    24a2:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin7, (GET_BIT(copy_u8Cmd,3)));
    24a6:	89 ad       	ldd	r24, Y+57	; 0x39
    24a8:	86 95       	lsr	r24
    24aa:	86 95       	lsr	r24
    24ac:	86 95       	lsr	r24
    24ae:	98 2f       	mov	r25, r24
    24b0:	91 70       	andi	r25, 0x01	; 1
    24b2:	83 e0       	ldi	r24, 0x03	; 3
    24b4:	63 e0       	ldi	r22, 0x03	; 3
    24b6:	49 2f       	mov	r20, r25
    24b8:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>


    DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin, DIO_PIN_HIGH);
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	62 e0       	ldi	r22, 0x02	; 2
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e8       	ldi	r26, 0x80	; 128
    24cc:	bf e3       	ldi	r27, 0x3F	; 63
    24ce:	89 8f       	std	Y+25, r24	; 0x19
    24d0:	9a 8f       	std	Y+26, r25	; 0x1a
    24d2:	ab 8f       	std	Y+27, r26	; 0x1b
    24d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	69 8d       	ldd	r22, Y+25	; 0x19
    24d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a e7       	ldi	r20, 0x7A	; 122
    24e4:	55 e4       	ldi	r21, 0x45	; 69
    24e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8d 8b       	std	Y+21, r24	; 0x15
    24f0:	9e 8b       	std	Y+22, r25	; 0x16
    24f2:	af 8b       	std	Y+23, r26	; 0x17
    24f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f6:	6d 89       	ldd	r22, Y+21	; 0x15
    24f8:	7e 89       	ldd	r23, Y+22	; 0x16
    24fa:	8f 89       	ldd	r24, Y+23	; 0x17
    24fc:	98 8d       	ldd	r25, Y+24	; 0x18
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <LCD_voidWriteCmd+0x304>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9c 8b       	std	Y+20, r25	; 0x14
    2514:	8b 8b       	std	Y+19, r24	; 0x13
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <LCD_voidWriteCmd+0x382>
	else if (__tmp > 65535)
    2518:	6d 89       	ldd	r22, Y+21	; 0x15
    251a:	7e 89       	ldd	r23, Y+22	; 0x16
    251c:	8f 89       	ldd	r24, Y+23	; 0x17
    251e:	98 8d       	ldd	r25, Y+24	; 0x18
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <LCD_voidWriteCmd+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	69 8d       	ldd	r22, Y+25	; 0x19
    2532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9c 8b       	std	Y+20, r25	; 0x14
    2556:	8b 8b       	std	Y+19, r24	; 0x13
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <LCD_voidWriteCmd+0x364>
    255a:	80 e9       	ldi	r24, 0x90	; 144
    255c:	91 e0       	ldi	r25, 0x01	; 1
    255e:	9a 8b       	std	Y+18, r25	; 0x12
    2560:	89 8b       	std	Y+17, r24	; 0x11
    2562:	89 89       	ldd	r24, Y+17	; 0x11
    2564:	9a 89       	ldd	r25, Y+18	; 0x12
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_voidWriteCmd+0x352>
    256a:	9a 8b       	std	Y+18, r25	; 0x12
    256c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8b 89       	ldd	r24, Y+19	; 0x13
    2570:	9c 89       	ldd	r25, Y+20	; 0x14
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	9c 8b       	std	Y+20, r25	; 0x14
    2576:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	9c 89       	ldd	r25, Y+20	; 0x14
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <LCD_voidWriteCmd+0x346>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <LCD_voidWriteCmd+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	6d 89       	ldd	r22, Y+21	; 0x15
    2584:	7e 89       	ldd	r23, Y+22	; 0x16
    2586:	8f 89       	ldd	r24, Y+23	; 0x17
    2588:	98 8d       	ldd	r25, Y+24	; 0x18
    258a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9c 8b       	std	Y+20, r25	; 0x14
    2594:	8b 8b       	std	Y+19, r24	; 0x13
    2596:	8b 89       	ldd	r24, Y+19	; 0x13
    2598:	9c 89       	ldd	r25, Y+20	; 0x14
    259a:	98 8b       	std	Y+16, r25	; 0x10
    259c:	8f 87       	std	Y+15, r24	; 0x0f
    259e:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a0:	98 89       	ldd	r25, Y+16	; 0x10
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_voidWriteCmd+0x38e>
    25a6:	98 8b       	std	Y+16, r25	; 0x10
    25a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin, DIO_PIN_LOW);
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	62 e0       	ldi	r22, 0x02	; 2
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 ea       	ldi	r26, 0xA0	; 160
    25ba:	b0 e4       	ldi	r27, 0x40	; 64
    25bc:	8b 87       	std	Y+11, r24	; 0x0b
    25be:	9c 87       	std	Y+12, r25	; 0x0c
    25c0:	ad 87       	std	Y+13, r26	; 0x0d
    25c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a e7       	ldi	r20, 0x7A	; 122
    25d2:	55 e4       	ldi	r21, 0x45	; 69
    25d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8f 83       	std	Y+7, r24	; 0x07
    25de:	98 87       	std	Y+8, r25	; 0x08
    25e0:	a9 87       	std	Y+9, r26	; 0x09
    25e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <LCD_voidWriteCmd+0x3f2>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <LCD_voidWriteCmd+0x470>
	else if (__tmp > 65535)
    2606:	6f 81       	ldd	r22, Y+7	; 0x07
    2608:	78 85       	ldd	r23, Y+8	; 0x08
    260a:	89 85       	ldd	r24, Y+9	; 0x09
    260c:	9a 85       	ldd	r25, Y+10	; 0x0a
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <LCD_voidWriteCmd+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2620:	7c 85       	ldd	r23, Y+12	; 0x0c
    2622:	8d 85       	ldd	r24, Y+13	; 0x0d
    2624:	9e 85       	ldd	r25, Y+14	; 0x0e
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	51 e4       	ldi	r21, 0x41	; 65
    262e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <LCD_voidWriteCmd+0x452>
    2648:	80 e9       	ldi	r24, 0x90	; 144
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	9c 83       	std	Y+4, r25	; 0x04
    264e:	8b 83       	std	Y+3, r24	; 0x03
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_voidWriteCmd+0x440>
    2658:	9c 83       	std	Y+4, r25	; 0x04
    265a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	8d 81       	ldd	r24, Y+5	; 0x05
    2668:	9e 81       	ldd	r25, Y+6	; 0x06
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	69 f7       	brne	.-38     	; 0x2648 <LCD_voidWriteCmd+0x434>
    266e:	14 c0       	rjmp	.+40     	; 0x2698 <LCD_voidWriteCmd+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	6f 81       	ldd	r22, Y+7	; 0x07
    2672:	78 85       	ldd	r23, Y+8	; 0x08
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	9a 85       	ldd	r25, Y+10	; 0x0a
    2678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	9a 83       	std	Y+2, r25	; 0x02
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	9a 81       	ldd	r25, Y+2	; 0x02
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_voidWriteCmd+0x47c>
    2694:	9a 83       	std	Y+2, r25	; 0x02
    2696:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    2698:	e9 96       	adiw	r28, 0x39	; 57
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <LCD_voidWriteChar>:
void LCD_voidWriteChar(char copy_charChar)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	6d 97       	sbiw	r28, 0x1d	; 29
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	8d 8f       	std	Y+29, r24	; 0x1d

DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_RS_Pin,DIO_PIN_HIGH);  /*data*/
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_RW_Pin,DIO_PIN_LOW);  /*data*/
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>

#if LCD_MODE== LCD_4_BIT


DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin7, (GET_BIT(copy_charChar,7)));
    26d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d6:	98 2f       	mov	r25, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	99 27       	eor	r25, r25
    26dc:	99 1f       	adc	r25, r25
    26de:	83 e0       	ldi	r24, 0x03	; 3
    26e0:	63 e0       	ldi	r22, 0x03	; 3
    26e2:	49 2f       	mov	r20, r25
    26e4:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin6, (GET_BIT(copy_charChar,6)));
    26e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ea:	82 95       	swap	r24
    26ec:	86 95       	lsr	r24
    26ee:	86 95       	lsr	r24
    26f0:	83 70       	andi	r24, 0x03	; 3
    26f2:	98 2f       	mov	r25, r24
    26f4:	91 70       	andi	r25, 0x01	; 1
    26f6:	83 e0       	ldi	r24, 0x03	; 3
    26f8:	62 e0       	ldi	r22, 0x02	; 2
    26fa:	49 2f       	mov	r20, r25
    26fc:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin5, (GET_BIT(copy_charChar,5)));
    2700:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2702:	82 95       	swap	r24
    2704:	86 95       	lsr	r24
    2706:	87 70       	andi	r24, 0x07	; 7
    2708:	98 2f       	mov	r25, r24
    270a:	91 70       	andi	r25, 0x01	; 1
    270c:	83 e0       	ldi	r24, 0x03	; 3
    270e:	61 e0       	ldi	r22, 0x01	; 1
    2710:	49 2f       	mov	r20, r25
    2712:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin4, (GET_BIT(copy_charChar,4)));
    2716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2718:	82 95       	swap	r24
    271a:	8f 70       	andi	r24, 0x0F	; 15
    271c:	98 2f       	mov	r25, r24
    271e:	91 70       	andi	r25, 0x01	; 1
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	49 2f       	mov	r20, r25
    2726:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>

//DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_pin,DIO_PIN_LOW);
DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_HIGH);
    272a:	82 e0       	ldi	r24, 0x02	; 2
    272c:	62 e0       	ldi	r22, 0x02	; 2
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a0 e8       	ldi	r26, 0x80	; 128
    273a:	bf e3       	ldi	r27, 0x3F	; 63
    273c:	89 8f       	std	Y+25, r24	; 0x19
    273e:	9a 8f       	std	Y+26, r25	; 0x1a
    2740:	ab 8f       	std	Y+27, r26	; 0x1b
    2742:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2744:	69 8d       	ldd	r22, Y+25	; 0x19
    2746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	4a e7       	ldi	r20, 0x7A	; 122
    2752:	55 e4       	ldi	r21, 0x45	; 69
    2754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	8d 8b       	std	Y+21, r24	; 0x15
    275e:	9e 8b       	std	Y+22, r25	; 0x16
    2760:	af 8b       	std	Y+23, r26	; 0x17
    2762:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	2c f4       	brge	.+10     	; 0x2786 <LCD_voidWriteChar+0xdc>
		__ticks = 1;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	9c 8b       	std	Y+20, r25	; 0x14
    2782:	8b 8b       	std	Y+19, r24	; 0x13
    2784:	3f c0       	rjmp	.+126    	; 0x2804 <LCD_voidWriteChar+0x15a>
	else if (__tmp > 65535)
    2786:	6d 89       	ldd	r22, Y+21	; 0x15
    2788:	7e 89       	ldd	r23, Y+22	; 0x16
    278a:	8f 89       	ldd	r24, Y+23	; 0x17
    278c:	98 8d       	ldd	r25, Y+24	; 0x18
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	3f ef       	ldi	r19, 0xFF	; 255
    2792:	4f e7       	ldi	r20, 0x7F	; 127
    2794:	57 e4       	ldi	r21, 0x47	; 71
    2796:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    279a:	18 16       	cp	r1, r24
    279c:	4c f5       	brge	.+82     	; 0x27f0 <LCD_voidWriteChar+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279e:	69 8d       	ldd	r22, Y+25	; 0x19
    27a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9c 8b       	std	Y+20, r25	; 0x14
    27c4:	8b 8b       	std	Y+19, r24	; 0x13
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <LCD_voidWriteChar+0x13c>
    27c8:	80 e9       	ldi	r24, 0x90	; 144
    27ca:	91 e0       	ldi	r25, 0x01	; 1
    27cc:	9a 8b       	std	Y+18, r25	; 0x12
    27ce:	89 8b       	std	Y+17, r24	; 0x11
    27d0:	89 89       	ldd	r24, Y+17	; 0x11
    27d2:	9a 89       	ldd	r25, Y+18	; 0x12
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <LCD_voidWriteChar+0x12a>
    27d8:	9a 8b       	std	Y+18, r25	; 0x12
    27da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27dc:	8b 89       	ldd	r24, Y+19	; 0x13
    27de:	9c 89       	ldd	r25, Y+20	; 0x14
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	9c 8b       	std	Y+20, r25	; 0x14
    27e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e6:	8b 89       	ldd	r24, Y+19	; 0x13
    27e8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	69 f7       	brne	.-38     	; 0x27c8 <LCD_voidWriteChar+0x11e>
    27ee:	14 c0       	rjmp	.+40     	; 0x2818 <LCD_voidWriteChar+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f0:	6d 89       	ldd	r22, Y+21	; 0x15
    27f2:	7e 89       	ldd	r23, Y+22	; 0x16
    27f4:	8f 89       	ldd	r24, Y+23	; 0x17
    27f6:	98 8d       	ldd	r25, Y+24	; 0x18
    27f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9c 8b       	std	Y+20, r25	; 0x14
    2802:	8b 8b       	std	Y+19, r24	; 0x13
    2804:	8b 89       	ldd	r24, Y+19	; 0x13
    2806:	9c 89       	ldd	r25, Y+20	; 0x14
    2808:	98 8b       	std	Y+16, r25	; 0x10
    280a:	8f 87       	std	Y+15, r24	; 0x0f
    280c:	8f 85       	ldd	r24, Y+15	; 0x0f
    280e:	98 89       	ldd	r25, Y+16	; 0x10
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <LCD_voidWriteChar+0x166>
    2814:	98 8b       	std	Y+16, r25	; 0x10
    2816:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_LOW);
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	62 e0       	ldi	r22, 0x02	; 2
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>


DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin7, (GET_BIT(copy_charChar,3)));
    2822:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2824:	86 95       	lsr	r24
    2826:	86 95       	lsr	r24
    2828:	86 95       	lsr	r24
    282a:	98 2f       	mov	r25, r24
    282c:	91 70       	andi	r25, 0x01	; 1
    282e:	83 e0       	ldi	r24, 0x03	; 3
    2830:	63 e0       	ldi	r22, 0x03	; 3
    2832:	49 2f       	mov	r20, r25
    2834:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin6, (GET_BIT(copy_charChar,2)));
    2838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    283a:	86 95       	lsr	r24
    283c:	86 95       	lsr	r24
    283e:	98 2f       	mov	r25, r24
    2840:	91 70       	andi	r25, 0x01	; 1
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	62 e0       	ldi	r22, 0x02	; 2
    2846:	49 2f       	mov	r20, r25
    2848:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin5, (GET_BIT(copy_charChar,1)));
    284c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    284e:	86 95       	lsr	r24
    2850:	98 2f       	mov	r25, r24
    2852:	91 70       	andi	r25, 0x01	; 1
    2854:	83 e0       	ldi	r24, 0x03	; 3
    2856:	61 e0       	ldi	r22, 0x01	; 1
    2858:	49 2f       	mov	r20, r25
    285a:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin4, (GET_BIT(copy_charChar,0)));
    285e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2860:	98 2f       	mov	r25, r24
    2862:	91 70       	andi	r25, 0x01	; 1
    2864:	83 e0       	ldi	r24, 0x03	; 3
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	49 2f       	mov	r20, r25
    286a:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>


DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin, DIO_PIN_HIGH);
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	62 e0       	ldi	r22, 0x02	; 2
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e8       	ldi	r26, 0x80	; 128
    287e:	bf e3       	ldi	r27, 0x3F	; 63
    2880:	8b 87       	std	Y+11, r24	; 0x0b
    2882:	9c 87       	std	Y+12, r25	; 0x0c
    2884:	ad 87       	std	Y+13, r26	; 0x0d
    2886:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6b 85       	ldd	r22, Y+11	; 0x0b
    288a:	7c 85       	ldd	r23, Y+12	; 0x0c
    288c:	8d 85       	ldd	r24, Y+13	; 0x0d
    288e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a e7       	ldi	r20, 0x7A	; 122
    2896:	55 e4       	ldi	r21, 0x45	; 69
    2898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8f 83       	std	Y+7, r24	; 0x07
    28a2:	98 87       	std	Y+8, r25	; 0x08
    28a4:	a9 87       	std	Y+9, r26	; 0x09
    28a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <LCD_voidWriteChar+0x220>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <LCD_voidWriteChar+0x29e>
	else if (__tmp > 65535)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <LCD_voidWriteChar+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	0f c0       	rjmp	.+30     	; 0x292a <LCD_voidWriteChar+0x280>
    290c:	80 e9       	ldi	r24, 0x90	; 144
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_voidWriteChar+0x26e>
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <LCD_voidWriteChar+0x262>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <LCD_voidWriteChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_voidWriteChar+0x2aa>
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin, DIO_PIN_LOW);
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	62 e0       	ldi	r22, 0x02	; 2
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_LOW);

#endif


}
    2966:	6d 96       	adiw	r28, 0x1d	; 29
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	2e 97       	sbiw	r28, 0x0e	; 14
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidWriteCmd(0x01);
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	a0 e0       	ldi	r26, 0x00	; 0
    2998:	b0 e4       	ldi	r27, 0x40	; 64
    299a:	8b 87       	std	Y+11, r24	; 0x0b
    299c:	9c 87       	std	Y+12, r25	; 0x0c
    299e:	ad 87       	std	Y+13, r26	; 0x0d
    29a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4a e7       	ldi	r20, 0x7A	; 122
    29b0:	55 e4       	ldi	r21, 0x45	; 69
    29b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	8f 83       	std	Y+7, r24	; 0x07
    29bc:	98 87       	std	Y+8, r25	; 0x08
    29be:	a9 87       	std	Y+9, r26	; 0x09
    29c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c2:	6f 81       	ldd	r22, Y+7	; 0x07
    29c4:	78 85       	ldd	r23, Y+8	; 0x08
    29c6:	89 85       	ldd	r24, Y+9	; 0x09
    29c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e8       	ldi	r20, 0x80	; 128
    29d0:	5f e3       	ldi	r21, 0x3F	; 63
    29d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29d6:	88 23       	and	r24, r24
    29d8:	2c f4       	brge	.+10     	; 0x29e4 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	3f c0       	rjmp	.+126    	; 0x2a62 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	3f ef       	ldi	r19, 0xFF	; 255
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	57 e4       	ldi	r21, 0x47	; 71
    29f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29f8:	18 16       	cp	r1, r24
    29fa:	4c f5       	brge	.+82     	; 0x2a4e <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e2       	ldi	r20, 0x20	; 32
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	9e 83       	std	Y+6, r25	; 0x06
    2a22:	8d 83       	std	Y+5, r24	; 0x05
    2a24:	0f c0       	rjmp	.+30     	; 0x2a44 <LCD_voidClearScreen+0xcc>
    2a26:	80 e9       	ldi	r24, 0x90	; 144
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	9c 83       	std	Y+4, r25	; 0x04
    2a2c:	8b 83       	std	Y+3, r24	; 0x03
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <LCD_voidClearScreen+0xba>
    2a36:	9c 83       	std	Y+4, r25	; 0x04
    2a38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	69 f7       	brne	.-38     	; 0x2a26 <LCD_voidClearScreen+0xae>
    2a4c:	14 c0       	rjmp	.+40     	; 0x2a76 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a50:	78 85       	ldd	r23, Y+8	; 0x08
    2a52:	89 85       	ldd	r24, Y+9	; 0x09
    2a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9e 83       	std	Y+6, r25	; 0x06
    2a60:	8d 83       	std	Y+5, r24	; 0x05
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LCD_voidClearScreen+0xf6>
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2a76:	2e 96       	adiw	r28, 0x0e	; 14
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <LCD_voidSetCursor>:
void LCD_voidSetCursor(u8 copy_u8Row,u8 copy_u8Col)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <LCD_voidSetCursor+0x6>
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidWriteCmd((128+(copy_u8Row*64)+copy_u8Col));
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	02 96       	adiw	r24, 0x02	; 2
    2a9e:	00 24       	eor	r0, r0
    2aa0:	96 95       	lsr	r25
    2aa2:	87 95       	ror	r24
    2aa4:	07 94       	ror	r0
    2aa6:	96 95       	lsr	r25
    2aa8:	87 95       	ror	r24
    2aaa:	07 94       	ror	r0
    2aac:	98 2f       	mov	r25, r24
    2aae:	80 2d       	mov	r24, r0
    2ab0:	98 2f       	mov	r25, r24
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	89 0f       	add	r24, r25
    2ab6:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
}
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <LCD_voidWriteString>:
void LCD_voidWriteString(const char* copy_ccharpString)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <LCD_voidWriteString+0x6>
    2aca:	0f 92       	push	r0
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	9b 83       	std	Y+3, r25	; 0x03
    2ad2:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8i;
	do{
		LCD_voidWriteChar(copy_ccharpString[local_u8i]);
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ade:	fc 01       	movw	r30, r24
    2ae0:	e2 0f       	add	r30, r18
    2ae2:	f3 1f       	adc	r31, r19
    2ae4:	80 81       	ld	r24, Z
    2ae6:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_voidWriteChar>
		local_u8i++;
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	8f 5f       	subi	r24, 0xFF	; 255
    2aee:	89 83       	std	Y+1, r24	; 0x01
	  }while(copy_ccharpString[local_u8i]!='\0');
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	9b 81       	ldd	r25, Y+3	; 0x03
    2afa:	fc 01       	movw	r30, r24
    2afc:	e2 0f       	add	r30, r18
    2afe:	f3 1f       	adc	r31, r19
    2b00:	80 81       	ld	r24, Z
    2b02:	88 23       	and	r24, r24
    2b04:	39 f7       	brne	.-50     	; 0x2ad4 <LCD_voidWriteString+0x10>

}
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <LCD_voidWriteNum>:

void LCD_voidWriteNum(u32 copy_u32Num)
{
    2b12:	ef 92       	push	r14
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	28 97       	sbiw	r28, 0x08	; 8
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	6d 83       	std	Y+5, r22	; 0x05
    2b30:	7e 83       	std	Y+6, r23	; 0x06
    2b32:	8f 83       	std	Y+7, r24	; 0x07
    2b34:	98 87       	std	Y+8, r25	; 0x08
	if(0==copy_u32Num)
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3a:	af 81       	ldd	r26, Y+7	; 0x07
    2b3c:	b8 85       	ldd	r27, Y+8	; 0x08
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	a1 05       	cpc	r26, r1
    2b42:	b1 05       	cpc	r27, r1
    2b44:	91 f4       	brne	.+36     	; 0x2b6a <LCD_voidWriteNum+0x58>
	{
		LCD_voidWriteChar((copy_u32Num%10)+48);
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	af 81       	ldd	r26, Y+7	; 0x07
    2b4c:	b8 85       	ldd	r27, Y+8	; 0x08
    2b4e:	2a e0       	ldi	r18, 0x0A	; 10
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__udivmodsi4>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	80 5d       	subi	r24, 0xD0	; 208
    2b64:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_voidWriteChar>
    2b68:	74 c0       	rjmp	.+232    	; 0x2c52 <LCD_voidWriteNum+0x140>
	}
	else
	{
		u32 reverse=1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	89 83       	std	Y+1, r24	; 0x01
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	ab 83       	std	Y+3, r26	; 0x03
    2b78:	bc 83       	std	Y+4, r27	; 0x04
    2b7a:	36 c0       	rjmp	.+108    	; 0x2be8 <LCD_voidWriteNum+0xd6>
		while(copy_u32Num!=0)
		{
			reverse=(reverse*10)+(copy_u32Num%10);
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b80:	ab 81       	ldd	r26, Y+3	; 0x03
    2b82:	bc 81       	ldd	r27, Y+4	; 0x04
    2b84:	2a e0       	ldi	r18, 0x0A	; 10
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	0e 94 19 1a 	call	0x3432	; 0x3432 <__mulsi3>
    2b94:	7b 01       	movw	r14, r22
    2b96:	8c 01       	movw	r16, r24
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	af 81       	ldd	r26, Y+7	; 0x07
    2b9e:	b8 85       	ldd	r27, Y+8	; 0x08
    2ba0:	2a e0       	ldi	r18, 0x0A	; 10
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__udivmodsi4>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8e 0d       	add	r24, r14
    2bb6:	9f 1d       	adc	r25, r15
    2bb8:	a0 1f       	adc	r26, r16
    2bba:	b1 1f       	adc	r27, r17
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	ab 83       	std	Y+3, r26	; 0x03
    2bc2:	bc 83       	std	Y+4, r27	; 0x04
			copy_u32Num/=10;
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc8:	af 81       	ldd	r26, Y+7	; 0x07
    2bca:	b8 85       	ldd	r27, Y+8	; 0x08
    2bcc:	2a e0       	ldi	r18, 0x0A	; 10
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__udivmodsi4>
    2bdc:	da 01       	movw	r26, r20
    2bde:	c9 01       	movw	r24, r18
    2be0:	8d 83       	std	Y+5, r24	; 0x05
    2be2:	9e 83       	std	Y+6, r25	; 0x06
    2be4:	af 83       	std	Y+7, r26	; 0x07
    2be6:	b8 87       	std	Y+8, r27	; 0x08
		LCD_voidWriteChar((copy_u32Num%10)+48);
	}
	else
	{
		u32 reverse=1;
		while(copy_u32Num!=0)
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	af 81       	ldd	r26, Y+7	; 0x07
    2bee:	b8 85       	ldd	r27, Y+8	; 0x08
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	a1 05       	cpc	r26, r1
    2bf4:	b1 05       	cpc	r27, r1
    2bf6:	11 f6       	brne	.-124    	; 0x2b7c <LCD_voidWriteNum+0x6a>
    2bf8:	23 c0       	rjmp	.+70     	; 0x2c40 <LCD_voidWriteNum+0x12e>
			reverse=(reverse*10)+(copy_u32Num%10);
			copy_u32Num/=10;
		}
		while(reverse!=1)
		{
			LCD_voidWriteChar((reverse%10)+48);
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	ab 81       	ldd	r26, Y+3	; 0x03
    2c00:	bc 81       	ldd	r27, Y+4	; 0x04
    2c02:	2a e0       	ldi	r18, 0x0A	; 10
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__udivmodsi4>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	80 5d       	subi	r24, 0xD0	; 208
    2c18:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_voidWriteChar>
			reverse/=10;
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	ab 81       	ldd	r26, Y+3	; 0x03
    2c22:	bc 81       	ldd	r27, Y+4	; 0x04
    2c24:	2a e0       	ldi	r18, 0x0A	; 10
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	50 e0       	ldi	r21, 0x00	; 0
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__udivmodsi4>
    2c34:	da 01       	movw	r26, r20
    2c36:	c9 01       	movw	r24, r18
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	ab 83       	std	Y+3, r26	; 0x03
    2c3e:	bc 83       	std	Y+4, r27	; 0x04
		while(copy_u32Num!=0)
		{
			reverse=(reverse*10)+(copy_u32Num%10);
			copy_u32Num/=10;
		}
		while(reverse!=1)
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	ab 81       	ldd	r26, Y+3	; 0x03
    2c46:	bc 81       	ldd	r27, Y+4	; 0x04
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	91 05       	cpc	r25, r1
    2c4c:	a1 05       	cpc	r26, r1
    2c4e:	b1 05       	cpc	r27, r1
    2c50:	a1 f6       	brne	.-88     	; 0x2bfa <LCD_voidWriteNum+0xe8>
		{
			LCD_voidWriteChar((reverse%10)+48);
			reverse/=10;
		}
	}
}
    2c52:	28 96       	adiw	r28, 0x08	; 8
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	ff 90       	pop	r15
    2c68:	ef 90       	pop	r14
    2c6a:	08 95       	ret

00002c6c <LCD_voidCreateChar>:

void LCD_voidCreateChar(u8 copy_u8AddressData, u8 * copy_u8charArr)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <LCD_voidCreateChar+0x6>
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <LCD_voidCreateChar+0x8>
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	8a 83       	std	Y+2, r24	; 0x02
    2c7a:	7c 83       	std	Y+4, r23	; 0x04
    2c7c:	6b 83       	std	Y+3, r22	; 0x03
	LCD_voidWriteCmd(0x40|(copy_u8AddressData*8));  //cgram
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	88 2f       	mov	r24, r24
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	80 64       	ori	r24, 0x40	; 64
    2c92:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
	for(u8 i=0;i<8;i++)
    2c96:	19 82       	std	Y+1, r1	; 0x01
    2c98:	0e c0       	rjmp	.+28     	; 0x2cb6 <LCD_voidCreateChar+0x4a>
	{
		LCD_voidWriteChar(copy_u8charArr[i]);
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	e2 0f       	add	r30, r18
    2ca8:	f3 1f       	adc	r31, r19
    2caa:	80 81       	ld	r24, Z
    2cac:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_voidWriteChar>
}

void LCD_voidCreateChar(u8 copy_u8AddressData, u8 * copy_u8charArr)
{
	LCD_voidWriteCmd(0x40|(copy_u8AddressData*8));  //cgram
	for(u8 i=0;i<8;i++)
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	88 30       	cpi	r24, 0x08	; 8
    2cba:	78 f3       	brcs	.-34     	; 0x2c9a <LCD_voidCreateChar+0x2e>
	{
		LCD_voidWriteChar(copy_u8charArr[i]);
	}
	LCD_voidWriteCmd(0x80);//return to ddram
    2cbc:	80 e8       	ldi	r24, 0x80	; 128
    2cbe:	0e 94 0a 11 	call	0x2214	; 0x2214 <LCD_voidWriteCmd>
}
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <PWM_voidInitChannel_0>:
#include "PWM_interface.h"
#include "PWM_private.h"
#include "PWM_register.h"

void PWM_voidInitChannel_0(void)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
	/*set mode*/
	SET_BIT(TCCR0,WGM00);
    2cd8:	a3 e5       	ldi	r26, 0x53	; 83
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e3 e5       	ldi	r30, 0x53	; 83
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	80 64       	ori	r24, 0x40	; 64
    2ce4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    2ce6:	a3 e5       	ldi	r26, 0x53	; 83
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e3 e5       	ldi	r30, 0x53	; 83
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	88 60       	ori	r24, 0x08	; 8
    2cf2:	8c 93       	st	X, r24

	/*non inverting*/
	CLEAR_BIT(TCCR0,COM00);
    2cf4:	a3 e5       	ldi	r26, 0x53	; 83
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	e3 e5       	ldi	r30, 0x53	; 83
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	8f 7e       	andi	r24, 0xEF	; 239
    2d00:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    2d02:	a3 e5       	ldi	r26, 0x53	; 83
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	e3 e5       	ldi	r30, 0x53	; 83
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	80 62       	ori	r24, 0x20	; 32
    2d0e:	8c 93       	st	X, r24

	/**/

}
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <PWM_voidGenerate_PWM_Channel_0>:
void PWM_voidGenerate_PWM_Channel_0(u8 copy_u8DutyCycle)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	0f 92       	push	r0
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8DutyCycle<=100)
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	85 36       	cpi	r24, 0x65	; 101
    2d26:	20 f5       	brcc	.+72     	; 0x2d70 <PWM_voidGenerate_PWM_Channel_0+0x5a>
	{
		OCR0 = (((u16)copy_u8DutyCycle*256)/100)-1;
    2d28:	ec e5       	ldi	r30, 0x5C	; 92
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	88 2f       	mov	r24, r24
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	98 2f       	mov	r25, r24
    2d34:	88 27       	eor	r24, r24
    2d36:	24 e6       	ldi	r18, 0x64	; 100
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	b9 01       	movw	r22, r18
    2d3c:	0e 94 38 1a 	call	0x3470	; 0x3470 <__udivmodhi4>
    2d40:	cb 01       	movw	r24, r22
    2d42:	81 50       	subi	r24, 0x01	; 1
    2d44:	80 83       	st	Z, r24

		SET_BIT(TCCR0,CS00);
    2d46:	a3 e5       	ldi	r26, 0x53	; 83
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e3 e5       	ldi	r30, 0x53	; 83
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	81 60       	ori	r24, 0x01	; 1
    2d52:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
    2d54:	a3 e5       	ldi	r26, 0x53	; 83
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e3 e5       	ldi	r30, 0x53	; 83
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	82 60       	ori	r24, 0x02	; 2
    2d60:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS02);
    2d62:	a3 e5       	ldi	r26, 0x53	; 83
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e3 e5       	ldi	r30, 0x53	; 83
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8b 7f       	andi	r24, 0xFB	; 251
    2d6e:	8c 93       	st	X, r24
	}
	else
	{
		/*report an error*/
	}
}
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <PWM_voidInitChannel_1A>:
void PWM_voidInitChannel_1A(void)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
	/*fast PWM mode 14*/
	CLEAR_BIT(TCCR1A,WGM10);
    2d80:	af e4       	ldi	r26, 0x4F	; 79
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	ef e4       	ldi	r30, 0x4F	; 79
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	8e 7f       	andi	r24, 0xFE	; 254
    2d8c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2d8e:	af e4       	ldi	r26, 0x4F	; 79
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	ef e4       	ldi	r30, 0x4F	; 79
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	82 60       	ori	r24, 0x02	; 2
    2d9a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    2d9c:	ae e4       	ldi	r26, 0x4E	; 78
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	ee e4       	ldi	r30, 0x4E	; 78
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	88 60       	ori	r24, 0x08	; 8
    2da8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    2daa:	ae e4       	ldi	r26, 0x4E	; 78
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	ee e4       	ldi	r30, 0x4E	; 78
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	80 61       	ori	r24, 0x10	; 16
    2db6:	8c 93       	st	X, r24


	/*non inverting*/
	SET_BIT(TCCR1A,COM1A1);
    2db8:	af e4       	ldi	r26, 0x4F	; 79
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	ef e4       	ldi	r30, 0x4F	; 79
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 68       	ori	r24, 0x80	; 128
    2dc4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,COM1A0);
    2dc6:	af e4       	ldi	r26, 0x4F	; 79
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	ef e4       	ldi	r30, 0x4F	; 79
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	8f 7b       	andi	r24, 0xBF	; 191
    2dd2:	8c 93       	st	X, r24

}
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	08 95       	ret

00002dda <PWM_voidStop_PWM_Channel_1A>:
void PWM_voidStop_PWM_Channel_1A(void)
{
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
	/*prescaler 64*/
	CLEAR_BIT(TCCR1B,CS10);
    2de2:	ae e4       	ldi	r26, 0x4E	; 78
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	ee e4       	ldi	r30, 0x4E	; 78
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	8e 7f       	andi	r24, 0xFE	; 254
    2dee:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    2df0:	ae e4       	ldi	r26, 0x4E	; 78
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	ee e4       	ldi	r30, 0x4E	; 78
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	8d 7f       	andi	r24, 0xFD	; 253
    2dfc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    2dfe:	ae e4       	ldi	r26, 0x4E	; 78
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	ee e4       	ldi	r30, 0x4E	; 78
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	8b 7f       	andi	r24, 0xFB	; 251
    2e0a:	8c 93       	st	X, r24
}
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <PWM_voidGenerate_PWM_Channel_1A>:
void PWM_voidGenerate_PWM_Channel_1A(u32 copy_u32Frequency_hz,f32 copy_f32DutyCycle)
{
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	28 97       	sbiw	r28, 0x08	; 8
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	69 83       	std	Y+1, r22	; 0x01
    2e2c:	7a 83       	std	Y+2, r23	; 0x02
    2e2e:	8b 83       	std	Y+3, r24	; 0x03
    2e30:	9c 83       	std	Y+4, r25	; 0x04
    2e32:	2d 83       	std	Y+5, r18	; 0x05
    2e34:	3e 83       	std	Y+6, r19	; 0x06
    2e36:	4f 83       	std	Y+7, r20	; 0x07
    2e38:	58 87       	std	Y+8, r21	; 0x08
	if(100>=copy_f32DutyCycle)
    2e3a:	6d 81       	ldd	r22, Y+5	; 0x05
    2e3c:	7e 81       	ldd	r23, Y+6	; 0x06
    2e3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e40:	98 85       	ldd	r25, Y+8	; 0x08
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	48 ec       	ldi	r20, 0xC8	; 200
    2e48:	52 e4       	ldi	r21, 0x42	; 66
    2e4a:	0e 94 4d 04 	call	0x89a	; 0x89a <__lesf2>
    2e4e:	18 16       	cp	r1, r24
    2e50:	0c f4       	brge	.+2      	; 0x2e54 <PWM_voidGenerate_PWM_Channel_1A+0x42>
    2e52:	60 c0       	rjmp	.+192    	; 0x2f14 <PWM_voidGenerate_PWM_Channel_1A+0x102>
	{
		/*tick time 4us and 64 prescaler*/
		ICR1 = ((1000000UL/copy_u32Frequency_hz)/4)-1;
    2e54:	06 e4       	ldi	r16, 0x46	; 70
    2e56:	10 e0       	ldi	r17, 0x00	; 0
    2e58:	80 e9       	ldi	r24, 0x90	; 144
    2e5a:	90 ed       	ldi	r25, 0xD0	; 208
    2e5c:	a3 e0       	ldi	r26, 0x03	; 3
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	29 81       	ldd	r18, Y+1	; 0x01
    2e62:	3a 81       	ldd	r19, Y+2	; 0x02
    2e64:	4b 81       	ldd	r20, Y+3	; 0x03
    2e66:	5c 81       	ldd	r21, Y+4	; 0x04
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__udivmodsi4>
    2e70:	da 01       	movw	r26, r20
    2e72:	c9 01       	movw	r24, r18
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f8 01       	movw	r30, r16
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	80 83       	st	Z, r24
		OCR1A = ((copy_f32DutyCycle*(ICR1 +1))/100)-1;
    2e7c:	0a e4       	ldi	r16, 0x4A	; 74
    2e7e:	10 e0       	ldi	r17, 0x00	; 0
    2e80:	e6 e4       	ldi	r30, 0x46	; 70
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	cc 01       	movw	r24, r24
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ea2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ea4:	4f 81       	ldd	r20, Y+7	; 0x07
    2ea6:	58 85       	ldd	r21, Y+8	; 0x08
    2ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	48 ec       	ldi	r20, 0xC8	; 200
    2eba:	52 e4       	ldi	r21, 0x42	; 66
    2ebc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
		/*prescaler 64*/
		SET_BIT(TCCR1B,CS10);
    2eea:	ae e4       	ldi	r26, 0x4E	; 78
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	ee e4       	ldi	r30, 0x4E	; 78
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	81 60       	ori	r24, 0x01	; 1
    2ef6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2ef8:	ae e4       	ldi	r26, 0x4E	; 78
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	ee e4       	ldi	r30, 0x4E	; 78
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	82 60       	ori	r24, 0x02	; 2
    2f04:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    2f06:	ae e4       	ldi	r26, 0x4E	; 78
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	ee e4       	ldi	r30, 0x4E	; 78
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	8b 7f       	andi	r24, 0xFB	; 251
    2f12:	8c 93       	st	X, r24
	}
}
    2f14:	28 96       	adiw	r28, 0x08	; 8
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	08 95       	ret

00002f2a <SERVO_voidInit>:
#include"DIO_interface.h"
#include"PWM_interface.h"


void SERVO_voidInit(void)
{
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
    2f32:	83 e0       	ldi	r24, 0x03	; 3
    2f34:	65 e0       	ldi	r22, 0x05	; 5
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
}
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <SERVO_voidStart>:

void SERVO_voidStart(u8 copy_u8Angle)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <SERVO_voidStart+0x6>
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <SERVO_voidStart+0x8>
    2f4a:	0f 92       	push	r0
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    2f50:	8d 83       	std	Y+5, r24	; 0x05
	f32 prv_f32DutyCycle=0;
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e0       	ldi	r26, 0x00	; 0
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	89 83       	std	Y+1, r24	; 0x01
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	ab 83       	std	Y+3, r26	; 0x03
    2f60:	bc 83       	std	Y+4, r27	; 0x04
	prv_f32DutyCycle=((f32)copy_u8Angle*0.027777)+5;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	88 2f       	mov	r24, r24
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a0 e0       	ldi	r26, 0x00	; 0
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	bc 01       	movw	r22, r24
    2f7a:	cd 01       	movw	r24, r26
    2f7c:	27 e9       	ldi	r18, 0x97	; 151
    2f7e:	3c e8       	ldi	r19, 0x8C	; 140
    2f80:	43 ee       	ldi	r20, 0xE3	; 227
    2f82:	5c e3       	ldi	r21, 0x3C	; 60
    2f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 ea       	ldi	r20, 0xA0	; 160
    2f96:	50 e4       	ldi	r21, 0x40	; 64
    2f98:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	9a 83       	std	Y+2, r25	; 0x02
    2fa4:	ab 83       	std	Y+3, r26	; 0x03
    2fa6:	bc 83       	std	Y+4, r27	; 0x04
	PWM_voidInitChannel_1A();
    2fa8:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <PWM_voidInitChannel_1A>
	PWM_voidGenerate_PWM_Channel_1A(50,prv_f32DutyCycle);
    2fac:	29 81       	ldd	r18, Y+1	; 0x01
    2fae:	3a 81       	ldd	r19, Y+2	; 0x02
    2fb0:	4b 81       	ldd	r20, Y+3	; 0x03
    2fb2:	5c 81       	ldd	r21, Y+4	; 0x04
    2fb4:	62 e3       	ldi	r22, 0x32	; 50
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	0e 94 09 17 	call	0x2e12	; 0x2e12 <PWM_voidGenerate_PWM_Channel_1A>


}
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <SERVO_voidOff>:
void SERVO_voidOff(void)
{
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
	PWM_voidStop_PWM_Channel_1A();
    2fd8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <PWM_voidStop_PWM_Channel_1A>
}
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <main>:

#include"DIO_interface.h"
#include"PWM_interface.h"

int main()
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	c7 56       	subi	r28, 0x67	; 103
    2fec:	d0 40       	sbci	r29, 0x00	; 0
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61

	const u8 password[]="12345";
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	44 96       	adiw	r24, 0x14	; 20
    2ffc:	61 96       	adiw	r28, 0x11	; 17
    2ffe:	9f af       	std	Y+63, r25	; 0x3f
    3000:	8e af       	std	Y+62, r24	; 0x3e
    3002:	61 97       	sbiw	r28, 0x11	; 17
    3004:	e0 e6       	ldi	r30, 0x60	; 96
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	63 96       	adiw	r28, 0x13	; 19
    300a:	ff af       	std	Y+63, r31	; 0x3f
    300c:	ee af       	std	Y+62, r30	; 0x3e
    300e:	63 97       	sbiw	r28, 0x13	; 19
    3010:	f6 e0       	ldi	r31, 0x06	; 6
    3012:	64 96       	adiw	r28, 0x14	; 20
    3014:	ff af       	std	Y+63, r31	; 0x3f
    3016:	64 97       	sbiw	r28, 0x14	; 20
    3018:	63 96       	adiw	r28, 0x13	; 19
    301a:	ee ad       	ldd	r30, Y+62	; 0x3e
    301c:	ff ad       	ldd	r31, Y+63	; 0x3f
    301e:	63 97       	sbiw	r28, 0x13	; 19
    3020:	00 80       	ld	r0, Z
    3022:	63 96       	adiw	r28, 0x13	; 19
    3024:	8e ad       	ldd	r24, Y+62	; 0x3e
    3026:	9f ad       	ldd	r25, Y+63	; 0x3f
    3028:	63 97       	sbiw	r28, 0x13	; 19
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	63 96       	adiw	r28, 0x13	; 19
    302e:	9f af       	std	Y+63, r25	; 0x3f
    3030:	8e af       	std	Y+62, r24	; 0x3e
    3032:	63 97       	sbiw	r28, 0x13	; 19
    3034:	61 96       	adiw	r28, 0x11	; 17
    3036:	ee ad       	ldd	r30, Y+62	; 0x3e
    3038:	ff ad       	ldd	r31, Y+63	; 0x3f
    303a:	61 97       	sbiw	r28, 0x11	; 17
    303c:	00 82       	st	Z, r0
    303e:	61 96       	adiw	r28, 0x11	; 17
    3040:	8e ad       	ldd	r24, Y+62	; 0x3e
    3042:	9f ad       	ldd	r25, Y+63	; 0x3f
    3044:	61 97       	sbiw	r28, 0x11	; 17
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	61 96       	adiw	r28, 0x11	; 17
    304a:	9f af       	std	Y+63, r25	; 0x3f
    304c:	8e af       	std	Y+62, r24	; 0x3e
    304e:	61 97       	sbiw	r28, 0x11	; 17
    3050:	64 96       	adiw	r28, 0x14	; 20
    3052:	9f ad       	ldd	r25, Y+63	; 0x3f
    3054:	64 97       	sbiw	r28, 0x14	; 20
    3056:	91 50       	subi	r25, 0x01	; 1
    3058:	64 96       	adiw	r28, 0x14	; 20
    305a:	9f af       	std	Y+63, r25	; 0x3f
    305c:	64 97       	sbiw	r28, 0x14	; 20
    305e:	64 96       	adiw	r28, 0x14	; 20
    3060:	ef ad       	ldd	r30, Y+63	; 0x3f
    3062:	64 97       	sbiw	r28, 0x14	; 20
    3064:	ee 23       	and	r30, r30
    3066:	c1 f6       	brne	.-80     	; 0x3018 <main+0x36>
	u8 user_pass[5];
	u8 key=11;
    3068:	8b e0       	ldi	r24, 0x0B	; 11
    306a:	8b 8b       	std	Y+19, r24	; 0x13
	u8 counter=3;
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 kpd_counter=0;
    3070:	19 8a       	std	Y+17, r1	; 0x11
	u8 check=0;
    3072:	18 8a       	std	Y+16, r1	; 0x10

	const char text1[]="welcome";
    3074:	ce 01       	movw	r24, r28
    3076:	4f 96       	adiw	r24, 0x1f	; 31
    3078:	66 96       	adiw	r28, 0x16	; 22
    307a:	9f af       	std	Y+63, r25	; 0x3f
    307c:	8e af       	std	Y+62, r24	; 0x3e
    307e:	66 97       	sbiw	r28, 0x16	; 22
    3080:	e6 e6       	ldi	r30, 0x66	; 102
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	68 96       	adiw	r28, 0x18	; 24
    3086:	ff af       	std	Y+63, r31	; 0x3f
    3088:	ee af       	std	Y+62, r30	; 0x3e
    308a:	68 97       	sbiw	r28, 0x18	; 24
    308c:	f8 e0       	ldi	r31, 0x08	; 8
    308e:	69 96       	adiw	r28, 0x19	; 25
    3090:	ff af       	std	Y+63, r31	; 0x3f
    3092:	69 97       	sbiw	r28, 0x19	; 25
    3094:	68 96       	adiw	r28, 0x18	; 24
    3096:	ee ad       	ldd	r30, Y+62	; 0x3e
    3098:	ff ad       	ldd	r31, Y+63	; 0x3f
    309a:	68 97       	sbiw	r28, 0x18	; 24
    309c:	00 80       	ld	r0, Z
    309e:	68 96       	adiw	r28, 0x18	; 24
    30a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    30a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    30a4:	68 97       	sbiw	r28, 0x18	; 24
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	68 96       	adiw	r28, 0x18	; 24
    30aa:	9f af       	std	Y+63, r25	; 0x3f
    30ac:	8e af       	std	Y+62, r24	; 0x3e
    30ae:	68 97       	sbiw	r28, 0x18	; 24
    30b0:	66 96       	adiw	r28, 0x16	; 22
    30b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    30b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    30b6:	66 97       	sbiw	r28, 0x16	; 22
    30b8:	00 82       	st	Z, r0
    30ba:	66 96       	adiw	r28, 0x16	; 22
    30bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    30be:	9f ad       	ldd	r25, Y+63	; 0x3f
    30c0:	66 97       	sbiw	r28, 0x16	; 22
    30c2:	01 96       	adiw	r24, 0x01	; 1
    30c4:	66 96       	adiw	r28, 0x16	; 22
    30c6:	9f af       	std	Y+63, r25	; 0x3f
    30c8:	8e af       	std	Y+62, r24	; 0x3e
    30ca:	66 97       	sbiw	r28, 0x16	; 22
    30cc:	69 96       	adiw	r28, 0x19	; 25
    30ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    30d0:	69 97       	sbiw	r28, 0x19	; 25
    30d2:	91 50       	subi	r25, 0x01	; 1
    30d4:	69 96       	adiw	r28, 0x19	; 25
    30d6:	9f af       	std	Y+63, r25	; 0x3f
    30d8:	69 97       	sbiw	r28, 0x19	; 25
    30da:	69 96       	adiw	r28, 0x19	; 25
    30dc:	ef ad       	ldd	r30, Y+63	; 0x3f
    30de:	69 97       	sbiw	r28, 0x19	; 25
    30e0:	ee 23       	and	r30, r30
    30e2:	c1 f6       	brne	.-80     	; 0x3094 <main+0xb2>
	const char text2[]="Enter pass:";
    30e4:	ce 01       	movw	r24, r28
    30e6:	87 96       	adiw	r24, 0x27	; 39
    30e8:	6b 96       	adiw	r28, 0x1b	; 27
    30ea:	9f af       	std	Y+63, r25	; 0x3f
    30ec:	8e af       	std	Y+62, r24	; 0x3e
    30ee:	6b 97       	sbiw	r28, 0x1b	; 27
    30f0:	ee e6       	ldi	r30, 0x6E	; 110
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	6d 96       	adiw	r28, 0x1d	; 29
    30f6:	ff af       	std	Y+63, r31	; 0x3f
    30f8:	ee af       	std	Y+62, r30	; 0x3e
    30fa:	6d 97       	sbiw	r28, 0x1d	; 29
    30fc:	fc e0       	ldi	r31, 0x0C	; 12
    30fe:	6e 96       	adiw	r28, 0x1e	; 30
    3100:	ff af       	std	Y+63, r31	; 0x3f
    3102:	6e 97       	sbiw	r28, 0x1e	; 30
    3104:	6d 96       	adiw	r28, 0x1d	; 29
    3106:	ee ad       	ldd	r30, Y+62	; 0x3e
    3108:	ff ad       	ldd	r31, Y+63	; 0x3f
    310a:	6d 97       	sbiw	r28, 0x1d	; 29
    310c:	00 80       	ld	r0, Z
    310e:	6d 96       	adiw	r28, 0x1d	; 29
    3110:	8e ad       	ldd	r24, Y+62	; 0x3e
    3112:	9f ad       	ldd	r25, Y+63	; 0x3f
    3114:	6d 97       	sbiw	r28, 0x1d	; 29
    3116:	01 96       	adiw	r24, 0x01	; 1
    3118:	6d 96       	adiw	r28, 0x1d	; 29
    311a:	9f af       	std	Y+63, r25	; 0x3f
    311c:	8e af       	std	Y+62, r24	; 0x3e
    311e:	6d 97       	sbiw	r28, 0x1d	; 29
    3120:	6b 96       	adiw	r28, 0x1b	; 27
    3122:	ee ad       	ldd	r30, Y+62	; 0x3e
    3124:	ff ad       	ldd	r31, Y+63	; 0x3f
    3126:	6b 97       	sbiw	r28, 0x1b	; 27
    3128:	00 82       	st	Z, r0
    312a:	6b 96       	adiw	r28, 0x1b	; 27
    312c:	8e ad       	ldd	r24, Y+62	; 0x3e
    312e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3130:	6b 97       	sbiw	r28, 0x1b	; 27
    3132:	01 96       	adiw	r24, 0x01	; 1
    3134:	6b 96       	adiw	r28, 0x1b	; 27
    3136:	9f af       	std	Y+63, r25	; 0x3f
    3138:	8e af       	std	Y+62, r24	; 0x3e
    313a:	6b 97       	sbiw	r28, 0x1b	; 27
    313c:	6e 96       	adiw	r28, 0x1e	; 30
    313e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3140:	6e 97       	sbiw	r28, 0x1e	; 30
    3142:	91 50       	subi	r25, 0x01	; 1
    3144:	6e 96       	adiw	r28, 0x1e	; 30
    3146:	9f af       	std	Y+63, r25	; 0x3f
    3148:	6e 97       	sbiw	r28, 0x1e	; 30
    314a:	6e 96       	adiw	r28, 0x1e	; 30
    314c:	ef ad       	ldd	r30, Y+63	; 0x3f
    314e:	6e 97       	sbiw	r28, 0x1e	; 30
    3150:	ee 23       	and	r30, r30
    3152:	c1 f6       	brne	.-80     	; 0x3104 <main+0x122>
	const char text3[]="wrong pass";
    3154:	ce 01       	movw	r24, r28
    3156:	c3 96       	adiw	r24, 0x33	; 51
    3158:	a0 96       	adiw	r28, 0x20	; 32
    315a:	9f af       	std	Y+63, r25	; 0x3f
    315c:	8e af       	std	Y+62, r24	; 0x3e
    315e:	a0 97       	sbiw	r28, 0x20	; 32
    3160:	ea e7       	ldi	r30, 0x7A	; 122
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	a2 96       	adiw	r28, 0x22	; 34
    3166:	ff af       	std	Y+63, r31	; 0x3f
    3168:	ee af       	std	Y+62, r30	; 0x3e
    316a:	a2 97       	sbiw	r28, 0x22	; 34
    316c:	fb e0       	ldi	r31, 0x0B	; 11
    316e:	a3 96       	adiw	r28, 0x23	; 35
    3170:	ff af       	std	Y+63, r31	; 0x3f
    3172:	a3 97       	sbiw	r28, 0x23	; 35
    3174:	a2 96       	adiw	r28, 0x22	; 34
    3176:	ee ad       	ldd	r30, Y+62	; 0x3e
    3178:	ff ad       	ldd	r31, Y+63	; 0x3f
    317a:	a2 97       	sbiw	r28, 0x22	; 34
    317c:	00 80       	ld	r0, Z
    317e:	a2 96       	adiw	r28, 0x22	; 34
    3180:	8e ad       	ldd	r24, Y+62	; 0x3e
    3182:	9f ad       	ldd	r25, Y+63	; 0x3f
    3184:	a2 97       	sbiw	r28, 0x22	; 34
    3186:	01 96       	adiw	r24, 0x01	; 1
    3188:	a2 96       	adiw	r28, 0x22	; 34
    318a:	9f af       	std	Y+63, r25	; 0x3f
    318c:	8e af       	std	Y+62, r24	; 0x3e
    318e:	a2 97       	sbiw	r28, 0x22	; 34
    3190:	a0 96       	adiw	r28, 0x20	; 32
    3192:	ee ad       	ldd	r30, Y+62	; 0x3e
    3194:	ff ad       	ldd	r31, Y+63	; 0x3f
    3196:	a0 97       	sbiw	r28, 0x20	; 32
    3198:	00 82       	st	Z, r0
    319a:	a0 96       	adiw	r28, 0x20	; 32
    319c:	8e ad       	ldd	r24, Y+62	; 0x3e
    319e:	9f ad       	ldd	r25, Y+63	; 0x3f
    31a0:	a0 97       	sbiw	r28, 0x20	; 32
    31a2:	01 96       	adiw	r24, 0x01	; 1
    31a4:	a0 96       	adiw	r28, 0x20	; 32
    31a6:	9f af       	std	Y+63, r25	; 0x3f
    31a8:	8e af       	std	Y+62, r24	; 0x3e
    31aa:	a0 97       	sbiw	r28, 0x20	; 32
    31ac:	a3 96       	adiw	r28, 0x23	; 35
    31ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    31b0:	a3 97       	sbiw	r28, 0x23	; 35
    31b2:	91 50       	subi	r25, 0x01	; 1
    31b4:	a3 96       	adiw	r28, 0x23	; 35
    31b6:	9f af       	std	Y+63, r25	; 0x3f
    31b8:	a3 97       	sbiw	r28, 0x23	; 35
    31ba:	a3 96       	adiw	r28, 0x23	; 35
    31bc:	ef ad       	ldd	r30, Y+63	; 0x3f
    31be:	a3 97       	sbiw	r28, 0x23	; 35
    31c0:	ee 23       	and	r30, r30
    31c2:	c1 f6       	brne	.-80     	; 0x3174 <main+0x192>
	const char text4[]="correct password";
    31c4:	ce 01       	movw	r24, r28
    31c6:	ce 96       	adiw	r24, 0x3e	; 62
    31c8:	a5 96       	adiw	r28, 0x25	; 37
    31ca:	9f af       	std	Y+63, r25	; 0x3f
    31cc:	8e af       	std	Y+62, r24	; 0x3e
    31ce:	a5 97       	sbiw	r28, 0x25	; 37
    31d0:	e5 e8       	ldi	r30, 0x85	; 133
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	a7 96       	adiw	r28, 0x27	; 39
    31d6:	ff af       	std	Y+63, r31	; 0x3f
    31d8:	ee af       	std	Y+62, r30	; 0x3e
    31da:	a7 97       	sbiw	r28, 0x27	; 39
    31dc:	f1 e1       	ldi	r31, 0x11	; 17
    31de:	a8 96       	adiw	r28, 0x28	; 40
    31e0:	ff af       	std	Y+63, r31	; 0x3f
    31e2:	a8 97       	sbiw	r28, 0x28	; 40
    31e4:	a7 96       	adiw	r28, 0x27	; 39
    31e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    31e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    31ea:	a7 97       	sbiw	r28, 0x27	; 39
    31ec:	00 80       	ld	r0, Z
    31ee:	a7 96       	adiw	r28, 0x27	; 39
    31f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    31f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    31f4:	a7 97       	sbiw	r28, 0x27	; 39
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	a7 96       	adiw	r28, 0x27	; 39
    31fa:	9f af       	std	Y+63, r25	; 0x3f
    31fc:	8e af       	std	Y+62, r24	; 0x3e
    31fe:	a7 97       	sbiw	r28, 0x27	; 39
    3200:	a5 96       	adiw	r28, 0x25	; 37
    3202:	ee ad       	ldd	r30, Y+62	; 0x3e
    3204:	ff ad       	ldd	r31, Y+63	; 0x3f
    3206:	a5 97       	sbiw	r28, 0x25	; 37
    3208:	00 82       	st	Z, r0
    320a:	a5 96       	adiw	r28, 0x25	; 37
    320c:	8e ad       	ldd	r24, Y+62	; 0x3e
    320e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3210:	a5 97       	sbiw	r28, 0x25	; 37
    3212:	01 96       	adiw	r24, 0x01	; 1
    3214:	a5 96       	adiw	r28, 0x25	; 37
    3216:	9f af       	std	Y+63, r25	; 0x3f
    3218:	8e af       	std	Y+62, r24	; 0x3e
    321a:	a5 97       	sbiw	r28, 0x25	; 37
    321c:	a8 96       	adiw	r28, 0x28	; 40
    321e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3220:	a8 97       	sbiw	r28, 0x28	; 40
    3222:	91 50       	subi	r25, 0x01	; 1
    3224:	a8 96       	adiw	r28, 0x28	; 40
    3226:	9f af       	std	Y+63, r25	; 0x3f
    3228:	a8 97       	sbiw	r28, 0x28	; 40
    322a:	a8 96       	adiw	r28, 0x28	; 40
    322c:	ef ad       	ldd	r30, Y+63	; 0x3f
    322e:	a8 97       	sbiw	r28, 0x28	; 40
    3230:	ee 23       	and	r30, r30
    3232:	c1 f6       	brne	.-80     	; 0x31e4 <main+0x202>


	/*initializations*/
	LCD_voidInit();
    3234:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidInit>
	KPD_init();
    3238:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <KPD_init>
	SERVO_voidInit();
    323c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <SERVO_voidInit>
	/*led*/
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_PIN_OUTPUT);
    3240:	83 e0       	ldi	r24, 0x03	; 3
    3242:	67 e0       	ldi	r22, 0x07	; 7
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>
	/*buzzer*/
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_OUTPUT);
    324a:	83 e0       	ldi	r24, 0x03	; 3
    324c:	66 e0       	ldi	r22, 0x06	; 6
    324e:	41 e0       	ldi	r20, 0x01	; 1
    3250:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DIO_voidSetPinDirection>

	/*welcome*/
	LCD_voidClearScreen();
    3254:	0e 94 bc 14 	call	0x2978	; 0x2978 <LCD_voidClearScreen>
	LCD_voidWriteString(text1);
    3258:	ce 01       	movw	r24, r28
    325a:	4f 96       	adiw	r24, 0x1f	; 31
    325c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <LCD_voidWriteString>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	aa e7       	ldi	r26, 0x7A	; 122
    3266:	b4 e4       	ldi	r27, 0x44	; 68
    3268:	8b 87       	std	Y+11, r24	; 0x0b
    326a:	9c 87       	std	Y+12, r25	; 0x0c
    326c:	ad 87       	std	Y+13, r26	; 0x0d
    326e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3270:	6b 85       	ldd	r22, Y+11	; 0x0b
    3272:	7c 85       	ldd	r23, Y+12	; 0x0c
    3274:	8d 85       	ldd	r24, Y+13	; 0x0d
    3276:	9e 85       	ldd	r25, Y+14	; 0x0e
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	4a e7       	ldi	r20, 0x7A	; 122
    327e:	55 e4       	ldi	r21, 0x45	; 69
    3280:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	8f 83       	std	Y+7, r24	; 0x07
    328a:	98 87       	std	Y+8, r25	; 0x08
    328c:	a9 87       	std	Y+9, r26	; 0x09
    328e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3290:	6f 81       	ldd	r22, Y+7	; 0x07
    3292:	78 85       	ldd	r23, Y+8	; 0x08
    3294:	89 85       	ldd	r24, Y+9	; 0x09
    3296:	9a 85       	ldd	r25, Y+10	; 0x0a
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e8       	ldi	r20, 0x80	; 128
    329e:	5f e3       	ldi	r21, 0x3F	; 63
    32a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32a4:	88 23       	and	r24, r24
    32a6:	2c f4       	brge	.+10     	; 0x32b2 <main+0x2d0>
		__ticks = 1;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	9e 83       	std	Y+6, r25	; 0x06
    32ae:	8d 83       	std	Y+5, r24	; 0x05
    32b0:	3f c0       	rjmp	.+126    	; 0x3330 <main+0x34e>
	else if (__tmp > 65535)
    32b2:	6f 81       	ldd	r22, Y+7	; 0x07
    32b4:	78 85       	ldd	r23, Y+8	; 0x08
    32b6:	89 85       	ldd	r24, Y+9	; 0x09
    32b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	3f ef       	ldi	r19, 0xFF	; 255
    32be:	4f e7       	ldi	r20, 0x7F	; 127
    32c0:	57 e4       	ldi	r21, 0x47	; 71
    32c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32c6:	18 16       	cp	r1, r24
    32c8:	4c f5       	brge	.+82     	; 0x331c <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    32cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e2       	ldi	r20, 0x20	; 32
    32d8:	51 e4       	ldi	r21, 0x41	; 65
    32da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	9e 83       	std	Y+6, r25	; 0x06
    32f0:	8d 83       	std	Y+5, r24	; 0x05
    32f2:	0f c0       	rjmp	.+30     	; 0x3312 <main+0x330>
    32f4:	80 e9       	ldi	r24, 0x90	; 144
    32f6:	91 e0       	ldi	r25, 0x01	; 1
    32f8:	9c 83       	std	Y+4, r25	; 0x04
    32fa:	8b 83       	std	Y+3, r24	; 0x03
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <main+0x31e>
    3304:	9c 83       	std	Y+4, r25	; 0x04
    3306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3312:	8d 81       	ldd	r24, Y+5	; 0x05
    3314:	9e 81       	ldd	r25, Y+6	; 0x06
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	69 f7       	brne	.-38     	; 0x32f4 <main+0x312>
    331a:	14 c0       	rjmp	.+40     	; 0x3344 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331c:	6f 81       	ldd	r22, Y+7	; 0x07
    331e:	78 85       	ldd	r23, Y+8	; 0x08
    3320:	89 85       	ldd	r24, Y+9	; 0x09
    3322:	9a 85       	ldd	r25, Y+10	; 0x0a
    3324:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	8d 83       	std	Y+5, r24	; 0x05
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	9a 83       	std	Y+2, r25	; 0x02
    3336:	89 83       	std	Y+1, r24	; 0x01
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <main+0x35a>
    3340:	9a 83       	std	Y+2, r25	; 0x02
    3342:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		_delay_ms(1000);
		LCD_voidClearScreen();
    3344:	0e 94 bc 14 	call	0x2978	; 0x2978 <LCD_voidClearScreen>
		/*please enter password:*/
		LCD_voidWriteString(text2);
    3348:	ce 01       	movw	r24, r28
    334a:	87 96       	adiw	r24, 0x27	; 39
    334c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <LCD_voidWriteString>
    3350:	19 c0       	rjmp	.+50     	; 0x3384 <main+0x3a2>

		/*keypad enter password*/
		while(kpd_counter<5)
		{
			key=KPD_GetPressedKey();
    3352:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <KPD_GetPressedKey>
    3356:	8b 8b       	std	Y+19, r24	; 0x13
			if(key>= '0' && key<='9')
    3358:	8b 89       	ldd	r24, Y+19	; 0x13
    335a:	80 33       	cpi	r24, 0x30	; 48
    335c:	98 f0       	brcs	.+38     	; 0x3384 <main+0x3a2>
    335e:	8b 89       	ldd	r24, Y+19	; 0x13
    3360:	8a 33       	cpi	r24, 0x3A	; 58
    3362:	80 f4       	brcc	.+32     	; 0x3384 <main+0x3a2>
			{
				user_pass[kpd_counter]=key;
    3364:	89 89       	ldd	r24, Y+17	; 0x11
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	ce 01       	movw	r24, r28
    336c:	4a 96       	adiw	r24, 0x1a	; 26
    336e:	fc 01       	movw	r30, r24
    3370:	e2 0f       	add	r30, r18
    3372:	f3 1f       	adc	r31, r19
    3374:	8b 89       	ldd	r24, Y+19	; 0x13
    3376:	80 83       	st	Z, r24
				LCD_voidWriteChar('*');
    3378:	8a e2       	ldi	r24, 0x2A	; 42
    337a:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_voidWriteChar>
				kpd_counter++;
    337e:	89 89       	ldd	r24, Y+17	; 0x11
    3380:	8f 5f       	subi	r24, 0xFF	; 255
    3382:	89 8b       	std	Y+17, r24	; 0x11
		LCD_voidClearScreen();
		/*please enter password:*/
		LCD_voidWriteString(text2);

		/*keypad enter password*/
		while(kpd_counter<5)
    3384:	89 89       	ldd	r24, Y+17	; 0x11
    3386:	85 30       	cpi	r24, 0x05	; 5
    3388:	20 f3       	brcs	.-56     	; 0x3352 <main+0x370>
				LCD_voidWriteChar('*');
				kpd_counter++;
			}

		}
		kpd_counter=0;
    338a:	19 8a       	std	Y+17, r1	; 0x11

		/*check the password*/
		for(u8 i=0;i<5;i++)
    338c:	1f 86       	std	Y+15, r1	; 0x0f
    338e:	1a c0       	rjmp	.+52     	; 0x33c4 <main+0x3e2>
		{
			if(user_pass[i]==password[i])
    3390:	8f 85       	ldd	r24, Y+15	; 0x0f
    3392:	28 2f       	mov	r18, r24
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	ce 01       	movw	r24, r28
    3398:	4a 96       	adiw	r24, 0x1a	; 26
    339a:	fc 01       	movw	r30, r24
    339c:	e2 0f       	add	r30, r18
    339e:	f3 1f       	adc	r31, r19
    33a0:	40 81       	ld	r20, Z
    33a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	ce 01       	movw	r24, r28
    33aa:	44 96       	adiw	r24, 0x14	; 20
    33ac:	fc 01       	movw	r30, r24
    33ae:	e2 0f       	add	r30, r18
    33b0:	f3 1f       	adc	r31, r19
    33b2:	80 81       	ld	r24, Z
    33b4:	48 17       	cp	r20, r24
    33b6:	19 f4       	brne	.+6      	; 0x33be <main+0x3dc>
			{
				check++;
    33b8:	88 89       	ldd	r24, Y+16	; 0x10
    33ba:	8f 5f       	subi	r24, 0xFF	; 255
    33bc:	88 8b       	std	Y+16, r24	; 0x10

		}
		kpd_counter=0;

		/*check the password*/
		for(u8 i=0;i<5;i++)
    33be:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	8f 87       	std	Y+15, r24	; 0x0f
    33c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c6:	85 30       	cpi	r24, 0x05	; 5
    33c8:	18 f3       	brcs	.-58     	; 0x3390 <main+0x3ae>
				check++;
			}
		}

		/*correct pass*/
		if(check == 5)
    33ca:	88 89       	ldd	r24, Y+16	; 0x10
    33cc:	85 30       	cpi	r24, 0x05	; 5
    33ce:	51 f4       	brne	.+20     	; 0x33e4 <main+0x402>
		{
			LCD_voidClearScreen();
    33d0:	0e 94 bc 14 	call	0x2978	; 0x2978 <LCD_voidClearScreen>
			LCD_voidWriteString(text4);
    33d4:	ce 01       	movw	r24, r28
    33d6:	ce 96       	adiw	r24, 0x3e	; 62
    33d8:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <LCD_voidWriteString>
			SERVO_voidStart(180);
    33dc:	84 eb       	ldi	r24, 0xB4	; 180
    33de:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <SERVO_voidStart>
    33e2:	1b c0       	rjmp	.+54     	; 0x341a <main+0x438>
			break;
		}
		/*wrong pass*/
		else if(check < 4)
    33e4:	88 89       	ldd	r24, Y+16	; 0x10
    33e6:	84 30       	cpi	r24, 0x04	; 4
    33e8:	50 f4       	brcc	.+20     	; 0x33fe <main+0x41c>
		{
			LCD_voidClearScreen();
    33ea:	0e 94 bc 14 	call	0x2978	; 0x2978 <LCD_voidClearScreen>
			LCD_voidWriteString(text3);
    33ee:	ce 01       	movw	r24, r28
    33f0:	c3 96       	adiw	r24, 0x33	; 51
    33f2:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <LCD_voidWriteString>
			/*number of entries*/
			counter--;
    33f6:	8a 89       	ldd	r24, Y+18	; 0x12
    33f8:	81 50       	subi	r24, 0x01	; 1
    33fa:	8a 8b       	std	Y+18, r24	; 0x12
			check=0;
    33fc:	18 8a       	std	Y+16, r1	; 0x10

		}
		/*if number of entries is 0 break and halt*/
		if(counter<=0)
    33fe:	8a 89       	ldd	r24, Y+18	; 0x12
    3400:	88 23       	and	r24, r24
    3402:	09 f0       	breq	.+2      	; 0x3406 <main+0x424>
    3404:	2d cf       	rjmp	.-422    	; 0x3260 <main+0x27e>
		{
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_OUTPUT);
    3406:	83 e0       	ldi	r24, 0x03	; 3
    3408:	67 e0       	ldi	r22, 0x07	; 7
    340a:	41 e0       	ldi	r20, 0x01	; 1
    340c:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_PIN_OUTPUT);
    3410:	83 e0       	ldi	r24, 0x03	; 3
    3412:	66 e0       	ldi	r22, 0x06	; 6
    3414:	41 e0       	ldi	r20, 0x01	; 1
    3416:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_voidSetPinValue>
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}

	}

}
    341e:	c9 59       	subi	r28, 0x99	; 153
    3420:	df 4f       	sbci	r29, 0xFF	; 255
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <__mulsi3>:
    3432:	62 9f       	mul	r22, r18
    3434:	d0 01       	movw	r26, r0
    3436:	73 9f       	mul	r23, r19
    3438:	f0 01       	movw	r30, r0
    343a:	82 9f       	mul	r24, r18
    343c:	e0 0d       	add	r30, r0
    343e:	f1 1d       	adc	r31, r1
    3440:	64 9f       	mul	r22, r20
    3442:	e0 0d       	add	r30, r0
    3444:	f1 1d       	adc	r31, r1
    3446:	92 9f       	mul	r25, r18
    3448:	f0 0d       	add	r31, r0
    344a:	83 9f       	mul	r24, r19
    344c:	f0 0d       	add	r31, r0
    344e:	74 9f       	mul	r23, r20
    3450:	f0 0d       	add	r31, r0
    3452:	65 9f       	mul	r22, r21
    3454:	f0 0d       	add	r31, r0
    3456:	99 27       	eor	r25, r25
    3458:	72 9f       	mul	r23, r18
    345a:	b0 0d       	add	r27, r0
    345c:	e1 1d       	adc	r30, r1
    345e:	f9 1f       	adc	r31, r25
    3460:	63 9f       	mul	r22, r19
    3462:	b0 0d       	add	r27, r0
    3464:	e1 1d       	adc	r30, r1
    3466:	f9 1f       	adc	r31, r25
    3468:	bd 01       	movw	r22, r26
    346a:	cf 01       	movw	r24, r30
    346c:	11 24       	eor	r1, r1
    346e:	08 95       	ret

00003470 <__udivmodhi4>:
    3470:	aa 1b       	sub	r26, r26
    3472:	bb 1b       	sub	r27, r27
    3474:	51 e1       	ldi	r21, 0x11	; 17
    3476:	07 c0       	rjmp	.+14     	; 0x3486 <__udivmodhi4_ep>

00003478 <__udivmodhi4_loop>:
    3478:	aa 1f       	adc	r26, r26
    347a:	bb 1f       	adc	r27, r27
    347c:	a6 17       	cp	r26, r22
    347e:	b7 07       	cpc	r27, r23
    3480:	10 f0       	brcs	.+4      	; 0x3486 <__udivmodhi4_ep>
    3482:	a6 1b       	sub	r26, r22
    3484:	b7 0b       	sbc	r27, r23

00003486 <__udivmodhi4_ep>:
    3486:	88 1f       	adc	r24, r24
    3488:	99 1f       	adc	r25, r25
    348a:	5a 95       	dec	r21
    348c:	a9 f7       	brne	.-22     	; 0x3478 <__udivmodhi4_loop>
    348e:	80 95       	com	r24
    3490:	90 95       	com	r25
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	08 95       	ret

00003498 <__udivmodsi4>:
    3498:	a1 e2       	ldi	r26, 0x21	; 33
    349a:	1a 2e       	mov	r1, r26
    349c:	aa 1b       	sub	r26, r26
    349e:	bb 1b       	sub	r27, r27
    34a0:	fd 01       	movw	r30, r26
    34a2:	0d c0       	rjmp	.+26     	; 0x34be <__udivmodsi4_ep>

000034a4 <__udivmodsi4_loop>:
    34a4:	aa 1f       	adc	r26, r26
    34a6:	bb 1f       	adc	r27, r27
    34a8:	ee 1f       	adc	r30, r30
    34aa:	ff 1f       	adc	r31, r31
    34ac:	a2 17       	cp	r26, r18
    34ae:	b3 07       	cpc	r27, r19
    34b0:	e4 07       	cpc	r30, r20
    34b2:	f5 07       	cpc	r31, r21
    34b4:	20 f0       	brcs	.+8      	; 0x34be <__udivmodsi4_ep>
    34b6:	a2 1b       	sub	r26, r18
    34b8:	b3 0b       	sbc	r27, r19
    34ba:	e4 0b       	sbc	r30, r20
    34bc:	f5 0b       	sbc	r31, r21

000034be <__udivmodsi4_ep>:
    34be:	66 1f       	adc	r22, r22
    34c0:	77 1f       	adc	r23, r23
    34c2:	88 1f       	adc	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	1a 94       	dec	r1
    34c8:	69 f7       	brne	.-38     	; 0x34a4 <__udivmodsi4_loop>
    34ca:	60 95       	com	r22
    34cc:	70 95       	com	r23
    34ce:	80 95       	com	r24
    34d0:	90 95       	com	r25
    34d2:	9b 01       	movw	r18, r22
    34d4:	ac 01       	movw	r20, r24
    34d6:	bd 01       	movw	r22, r26
    34d8:	cf 01       	movw	r24, r30
    34da:	08 95       	ret

000034dc <__prologue_saves__>:
    34dc:	2f 92       	push	r2
    34de:	3f 92       	push	r3
    34e0:	4f 92       	push	r4
    34e2:	5f 92       	push	r5
    34e4:	6f 92       	push	r6
    34e6:	7f 92       	push	r7
    34e8:	8f 92       	push	r8
    34ea:	9f 92       	push	r9
    34ec:	af 92       	push	r10
    34ee:	bf 92       	push	r11
    34f0:	cf 92       	push	r12
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	ca 1b       	sub	r28, r26
    3506:	db 0b       	sbc	r29, r27
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	09 94       	ijmp

00003514 <__epilogue_restores__>:
    3514:	2a 88       	ldd	r2, Y+18	; 0x12
    3516:	39 88       	ldd	r3, Y+17	; 0x11
    3518:	48 88       	ldd	r4, Y+16	; 0x10
    351a:	5f 84       	ldd	r5, Y+15	; 0x0f
    351c:	6e 84       	ldd	r6, Y+14	; 0x0e
    351e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3520:	8c 84       	ldd	r8, Y+12	; 0x0c
    3522:	9b 84       	ldd	r9, Y+11	; 0x0b
    3524:	aa 84       	ldd	r10, Y+10	; 0x0a
    3526:	b9 84       	ldd	r11, Y+9	; 0x09
    3528:	c8 84       	ldd	r12, Y+8	; 0x08
    352a:	df 80       	ldd	r13, Y+7	; 0x07
    352c:	ee 80       	ldd	r14, Y+6	; 0x06
    352e:	fd 80       	ldd	r15, Y+5	; 0x05
    3530:	0c 81       	ldd	r16, Y+4	; 0x04
    3532:	1b 81       	ldd	r17, Y+3	; 0x03
    3534:	aa 81       	ldd	r26, Y+2	; 0x02
    3536:	b9 81       	ldd	r27, Y+1	; 0x01
    3538:	ce 0f       	add	r28, r30
    353a:	d1 1d       	adc	r29, r1
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	ed 01       	movw	r28, r26
    3548:	08 95       	ret

0000354a <_exit>:
    354a:	f8 94       	cli

0000354c <__stop_program>:
    354c:	ff cf       	rjmp	.-2      	; 0x354c <__stop_program>
